/**
 * FlareSolverr 管理面板 JavaScript
 * 提供服務管理、狀態監控和測試功能
 */

class FlareSolverrManager {
    constructor() {
        this.statusInterval = null;
        this.apiBase = '/api/flaresolverr';
        this.autoRefreshEnabled = true;
        this.refreshInterval = 30000; // 30秒
        
        // 不在構造函數中調用 init，而是等待 DOM 載入完成
    }
    
    /**
     * 初始化管理器
     */
    init() {
        console.log('FlareSolverr 管理器正在初始化...');
        
        // 綁定事件監聽器
        this.bindEventListeners();
        
        // 自動刷新狀態
        this.refreshStatus();
        
        // 啟動自動刷新
        if (this.autoRefreshEnabled) {
            this.startAutoRefresh();
        }
        
        // 頁面卸載時清理定時器
        window.addEventListener('beforeunload', () => {
            this.stopAutoRefresh();
        });
        
        console.log('FlareSolverr 管理器初始化完成');
    }
    
    /**
     * 綁定事件監聽器
     */
    bindEventListeners() {
        console.log('正在綁定事件監聽器...');
        
        // 服務控制按鈕
        const startBtn = document.getElementById('start-service-btn');
        const stopBtn = document.getElementById('stop-service-btn');
        const restartBtn = document.getElementById('restart-service-btn');
        const refreshBtn = document.getElementById('refresh-status-btn');
        const testBtn = document.getElementById('test-solve-btn');
        
        console.log('找到的按鈕元素:', {
            startBtn: !!startBtn,
            stopBtn: !!stopBtn,
            restartBtn: !!restartBtn,
            refreshBtn: !!refreshBtn,
            testBtn: !!testBtn
        });
        
        if (startBtn) {
            startBtn.addEventListener('click', (e) => {
                console.log('啟動按鈕被點擊');
                e.preventDefault();
                this.startService();
            });
        } else {
            console.error('未找到啟動按鈕元素');
        }
        
        if (stopBtn) {
            stopBtn.addEventListener('click', (e) => {
                console.log('停止按鈕被點擊');
                e.preventDefault();
                this.stopService();
            });
        } else {
            console.error('未找到停止按鈕元素');
        }
        
        if (restartBtn) {
            restartBtn.addEventListener('click', (e) => {
                console.log('重啟按鈕被點擊');
                e.preventDefault();
                this.restartService();
            });
        } else {
            console.error('未找到重啟按鈕元素');
        }
        
        if (refreshBtn) {
            refreshBtn.addEventListener('click', (e) => {
                console.log('刷新按鈕被點擊');
                e.preventDefault();
                this.refreshStatus();
            });
        } else {
            console.error('未找到刷新按鈕元素');
        }
        
        if (testBtn) {
            testBtn.addEventListener('click', (e) => {
                console.log('測試按鈕被點擊');
                e.preventDefault();
                this.testSolve();
            });
        } else {
            console.error('未找到測試按鈕元素');
        }
        
        // 測試 URL 輸入框回車事件
        const testUrlInput = document.getElementById('test-url');
        if (testUrlInput) {
            testUrlInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    console.log('測試輸入框回車鍵被按下');
                    e.preventDefault();
                    this.testSolve();
                }
            });
            console.log('測試輸入框事件已綁定');
        } else {
            console.error('未找到測試輸入框元素');
        }
        
        // 自動刷新開關
        const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
        if (autoRefreshToggle) {
            autoRefreshToggle.addEventListener('change', (e) => {
                console.log('自動刷新開關被切換:', e.target.checked);
                this.toggleAutoRefresh(e.target.checked);
            });
            console.log('自動刷新開關事件已綁定');
        } else {
            console.error('未找到自動刷新開關元素');
        }
        
        console.log('事件監聽器綁定完成');
    }
    
    /**
     * 啟動自動刷新
     */
    startAutoRefresh() {
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
        }
        
        this.statusInterval = setInterval(() => {
            this.refreshStatus();
        }, this.refreshInterval);
    }
    
    /**
     * 停止自動刷新
     */
    stopAutoRefresh() {
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
            this.statusInterval = null;
        }
    }
    
    /**
     * 切換自動刷新
     */
    toggleAutoRefresh(enabled) {
        this.autoRefreshEnabled = enabled;
        
        if (enabled) {
            this.startAutoRefresh();
            this.showNotification('自動刷新已啟用', 'info');
        } else {
            this.stopAutoRefresh();
            this.showNotification('自動刷新已禁用', 'info');
        }
    }
    
    /**
     * 顯示通知
     */
    showNotification(message, type = 'info', duration = 3000) {
        console.log(`顯示通知: ${message} (類型: ${type})`);
        
        const notification = document.getElementById('notification');
        if (!notification) {
            console.error('未找到通知容器元素');
            // 備用方案：使用 alert
            alert(`${type.toUpperCase()}: ${message}`);
            return;
        }
        
        console.log('通知容器元素已找到:', notification);
        
        notification.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        console.log('通知樣式已設置:', notification.className);
        
        setTimeout(() => {
            notification.classList.remove('show');
            console.log('通知已隱藏');
        }, duration);
    }
    
    /**
     * 設置按鈕載入狀態
     */
    setButtonLoading(buttonId, loading = true) {
        console.log(`設置按鈕載入狀態: ${buttonId}, 載入中: ${loading}`);
        
        const button = document.getElementById(buttonId);
        if (!button) {
            console.error(`未找到按鈕元素: ${buttonId}`);
            return;
        }
        
        const textElement = button.querySelector('span') || button;
        
        if (loading) {
            button.disabled = true;
            button.style.opacity = '0.6';
            textElement.innerHTML = '<div class="loading loading-dark"></div> 處理中...';
            console.log(`按鈕 ${buttonId} 已設置為載入狀態`);
        } else {
            button.disabled = false;
            button.style.opacity = '1';
            const texts = {
                'start-service-btn': '啟動服務',
                'stop-service-btn': '停止服務',
                'restart-service-btn': '重啟服務',
                'refresh-status-btn': '刷新狀態',
                'test-solve-btn': '測試解析'
            };
            textElement.textContent = texts[buttonId] || '操作';
            console.log(`按鈕 ${buttonId} 已恢復正常狀態`);
        }
    }
    
    /**
     * 發送 API 請求
     */
    async apiRequest(endpoint, options = {}) {
        try {
            const response = await fetch(`${this.apiBase}${endpoint}`, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API 請求失敗:', error);
            throw error;
        }
    }
    
    /**
     * 刷新服務狀態
     */
    async refreshStatus() {
        try {
            this.setButtonLoading('refresh-status-btn', true);
            
            const data = await this.apiRequest('/status');
            
            if (data.success) {
                this.updateStatusDisplay(data.status);
            } else {
                this.updateStatusError(data.message || '無法獲取狀態');
            }
        } catch (error) {
            this.updateStatusError(`連接錯誤: ${error.message}`);
        } finally {
            this.setButtonLoading('refresh-status-btn', false);
        }
    }
    
    /**
     * 更新狀態顯示
     */
    updateStatusDisplay(status) {
        const statusInfo = document.getElementById('status-info');
        const infoGrid = document.getElementById('info-grid');
        
        if (!statusInfo || !infoGrid) return;
        
        // 更新狀態指示器
        const statusClass = status.running ? 'status-running' : 'status-stopped';
        const statusText = status.running ? '運行中' : '已停止';
        
        statusInfo.innerHTML = `
            <span class="status-indicator ${statusClass}"></span>
            <strong>${statusText}</strong>
            ${status.running ? `- ${status.url}` : ''}
        `;
        
        // 更新詳細信息
        let infoCards = '';
        
        // 基本信息卡片
        infoCards += this.createInfoCard('基本信息', [
            { label: '狀態', value: statusText },
            { label: 'URL', value: status.url || 'N/A' },
            { label: '健康狀態', value: status.health || 'N/A' },
            { label: '版本', value: status.version || 'N/A' }
        ]);
        
        // 進程信息卡片
        if (status.pid) {
            infoCards += this.createInfoCard('進程信息', [
                { label: 'PID', value: status.pid },
                { label: '內存使用', value: status.memory_usage ? `${status.memory_usage.toFixed(2)} MB` : 'N/A' },
                { label: 'CPU 使用率', value: status.cpu_percent ? `${status.cpu_percent.toFixed(2)}%` : 'N/A' },
                { label: '啟動時間', value: status.create_time ? new Date(status.create_time * 1000).toLocaleString() : 'N/A' }
            ]);
        }
        
        // 監控信息卡片
        infoCards += this.createInfoCard('監控設置', [
            { label: '自動重啟', value: status.auto_restart ? '啟用' : '禁用' },
            { label: '監控狀態', value: status.monitoring ? '運行中' : '已停止' }
        ]);
        
        infoGrid.innerHTML = infoCards;
    }
    
    /**
     * 創建信息卡片
     */
    createInfoCard(title, items) {
        const itemsHtml = items.map(item => `
            <div class="info-item">
                <span class="info-label">${item.label}:</span>
                <span class="info-value">${item.value}</span>
            </div>
        `).join('');
        
        return `
            <div class="info-card">
                <h3>${title}</h3>
                ${itemsHtml}
            </div>
        `;
    }
    
    /**
     * 更新狀態錯誤顯示
     */
    updateStatusError(message) {
        const statusInfo = document.getElementById('status-info');
        const infoGrid = document.getElementById('info-grid');
        
        if (statusInfo) {
            statusInfo.innerHTML = `
                <span class="status-indicator status-unknown"></span>
                ${message}
            `;
        }
        
        if (infoGrid) {
            infoGrid.innerHTML = `
                <div class="info-card">
                    <h3>錯誤信息</h3>
                    <div class="info-item">
                        <span class="info-label">錯誤:</span>
                        <span class="info-value">${message}</span>
                    </div>
                </div>
            `;
        }
    }
    
    /**
     * 啟動服務
     */
    async startService() {
        try {
            this.setButtonLoading('start-service-btn', true);
            
            const data = await this.apiRequest('/start', { method: 'POST' });
            
            if (data.success) {
                this.showNotification(data.message, 'success');
                setTimeout(() => this.refreshStatus(), 2000);
            } else {
                this.showNotification(data.message, 'error');
            }
        } catch (error) {
            this.showNotification(`啟動服務時發生錯誤: ${error.message}`, 'error');
        } finally {
            this.setButtonLoading('start-service-btn', false);
        }
    }
    
    /**
     * 停止服務
     */
    async stopService() {
        try {
            this.setButtonLoading('stop-service-btn', true);
            
            const data = await this.apiRequest('/stop', { method: 'POST' });
            
            if (data.success) {
                this.showNotification(data.message, 'success');
                setTimeout(() => this.refreshStatus(), 2000);
            } else {
                this.showNotification(data.message, 'error');
            }
        } catch (error) {
            this.showNotification(`停止服務時發生錯誤: ${error.message}`, 'error');
        } finally {
            this.setButtonLoading('stop-service-btn', false);
        }
    }
    
    /**
     * 重啟服務
     */
    async restartService() {
        try {
            this.setButtonLoading('restart-service-btn', true);
            
            const data = await this.apiRequest('/restart', { method: 'POST' });
            
            if (data.success) {
                this.showNotification(data.message, 'success');
                setTimeout(() => this.refreshStatus(), 3000);
            } else {
                this.showNotification(data.message, 'error');
            }
        } catch (error) {
            this.showNotification(`重啟服務時發生錯誤: ${error.message}`, 'error');
        } finally {
            this.setButtonLoading('restart-service-btn', false);
        }
    }
    
    /**
     * 測試解析功能
     */
    async testSolve() {
        const urlInput = document.getElementById('test-url');
        const testResult = document.getElementById('test-result');
        
        if (!urlInput || !testResult) return;
        
        const url = urlInput.value.trim();
        if (!url) {
            this.showNotification('請輸入要測試的 URL', 'error');
            return;
        }
        
        try {
            this.setButtonLoading('test-solve-btn', true);
            testResult.style.display = 'block';
            testResult.innerHTML = '<div class="loading loading-dark"></div> 正在解析...';
            
            const data = await this.apiRequest('/solve', {
                method: 'POST',
                body: JSON.stringify({ url: url })
            });
            
            if (data.success) {
                testResult.innerHTML = `
                    <h4>✅ 解析成功</h4>
                    <p><strong>User-Agent:</strong> ${data.userAgent}</p>
                    <p><strong>Cookies:</strong> ${data.cookies.length} 個</p>
                    <p><strong>HTML 長度:</strong> ${data.html.length} 字符</p>
                    <details>
                        <summary>查看 HTML 內容</summary>
                        <pre>${this.escapeHtml(data.html.substring(0, 1000))}${data.html.length > 1000 ? '...' : ''}</pre>
                    </details>
                `;
                this.showNotification('URL 解析成功', 'success');
            } else {
                testResult.innerHTML = `
                    <h4>❌ 解析失敗</h4>
                    <p>${this.escapeHtml(data.message)}</p>
                `;
                this.showNotification('URL 解析失敗', 'error');
            }
        } catch (error) {
            testResult.innerHTML = `
                <h4>❌ 連接錯誤</h4>
                <p>${this.escapeHtml(error.message)}</p>
            `;
            this.showNotification(`測試時發生錯誤: ${error.message}`, 'error');
        } finally {
            this.setButtonLoading('test-solve-btn', false);
        }
    }
    
    /**
     * HTML 轉義
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * 格式化時間
     */
    formatTime(timestamp) {
        return new Date(timestamp * 1000).toLocaleString('zh-TW', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
    
    /**
     * 格式化文件大小
     */
    formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
}

// 全局實例
let flaresolverrManager;

// 當 DOM 載入完成時初始化
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM 載入完成，正在初始化 FlareSolverr 管理器...');
    
    // 創建管理器實例
    flaresolverrManager = new FlareSolverrManager();
    
    // 手動調用初始化
    flaresolverrManager.init();
    
    console.log('FlareSolverr 管理器已創建並初始化');
});

// 導出到全局作用域（用於調試）
window.FlareSolverrManager = FlareSolverrManager;
window.flaresolverrManager = flaresolverrManager;
